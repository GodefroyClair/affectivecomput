cifer.array
is.character(cifer.array)
unlist(cifer.array)
class(unlist(cifer.array))
cifer.array <- unlist(strsplit(cifer, ""))
cifer.array
lookup <- c(l = "e", m = "f", n = "g", o = "h", p = "i", q = "j", r = "k",
s = "l", t = "m", u = "n", v = "o", w = "p", x = "q", y = "r",
z = "s", a = "t", b = "u", c = "v", d = "w", e = "x", f = "y",
g = "z", h = "a", i = "b", j = "c", k = "d")
lookup[cifer.array]
freq <- table(cifer.array)
table(cifer.array)
cifer <- "gluhtlishjrvbadvyyplkashavbyjpwolypzavvdlhrvuuleatlzzhnlzdpajoavcpnlulyljpwolyrlfdvykpzaolapkkluzftivbvmklhaoputazertyuiopqsdfghjklmwxcvbn"
cifer.array <- unlist(strsplit(cifer, ""))
table(cifer.array)
lookup <- c(l = "e", m = "f", n = "g", o = "h", p = "i", q = "j", r = "k",
s = "l", t = "m", u = "n", v = "o", w = "p", x = "q", y = "r",
z = "s", a = "t", b = "u", c = "v", d = "w", e = "x", f = "y",
g = "z", h = "a", i = "b", j = "c", k = "d")
lookup[cifer.array]
uname(lookup[cifer.array])
unname(lookup[cifer.array])
paste(unname(lookup[cifer.array]))
paste(unname(lookup[cifer.array]), sep = "")
class(unname(lookup[cifer.array]))
list(unname(lookup[cifer.array]))
paste(list(unname(lookup[cifer.array])))
list(unname(lookup[cifer.array]))
join(unname(lookup[cifer.array]))
join(unname(lookup[cifer.array])
paste(unname(lookup[cifer.array]),collapse = "")
paste(unname(lookup[cifer.array]), collapse = "")
table(cifer.array)
cifer <- "gluhtlishjrvbadvyyplkashavbyjpwolypzavvdlhrvuuleatlzzhnlzdpajoavcpnlulyljpwolyrlfdvykpzaolapkkluzftivbvmklhaoput"
cifer.array <- unlist(strsplit(cifer, ""))
table(cifer.array)
lookup <- c(l = "e", m = "f", n = "g", o = "h", p = "i", q = "j", r = "k",
s = "l", t = "m", u = "n", v = "o", w = "p", x = "q", y = "r",
z = "s", a = "t", b = "u", c = "v", d = "w", e = "x", f = "y",
g = "z", h = "a", i = "b", j = "c", k = "d")
paste(unname(lookup[cifer.array]), collapse = "")
cifer <- "gluhtlishjrvbadvyyplkaohavbyjpwolypzavvdlhrvuuleatlzzhnlzdpajoavcpnlulyljpwolyrlfdvykpzaolapkkluzftivbvmklhaoput"
cifer.array <- unlist(strsplit(cifer, ""))
table(cifer.array)
lookup <- c(l = "e", m = "f", n = "g", o = "h", p = "i", q = "j", r = "k",
s = "l", t = "m", u = "n", v = "o", w = "p", x = "q", y = "r",
z = "s", a = "t", b = "u", c = "v", d = "w", e = "x", f = "y",
g = "z", h = "a", i = "b", j = "c", k = "d")
paste(unname(lookup[cifer.array]), collapse = "")
cifer <- "gluhtlishjrvbadvyyplkaohavbyjpwolypzavvdlhrvuuleatlzzhnlzdpajoavcpnlulyljpwolyrlfdvykpzaolapkkluzftivsvmklhaoput"
cifer.array <- unlist(strsplit(cifer, ""))
table(cifer.array)
lookup <- c(l = "e", m = "f", n = "g", o = "h", p = "i", q = "j", r = "k",
s = "l", t = "m", u = "n", v = "o", w = "p", x = "q", y = "r",
z = "s", a = "t", b = "u", c = "v", d = "w", e = "x", f = "y",
g = "z", h = "a", i = "b", j = "c", k = "d")
paste(unname(lookup[cifer.array]), collapse = "")
cifer <- "gluhtlishjrvbadvyyplkaohavbyjpwolypzavvdlhrvuuleatlzzhnlzdpajoavcpnlulyljpwolyrlfdvykpzaolapkkluzftivsvmklhaoputfmhcvypalovsilpuk"
cifer.array <- unlist(strsplit(cifer, ""))
table(cifer.array)
lookup <- c(l = "e", m = "f", n = "g", o = "h", p = "i", q = "j", r = "k",
s = "l", t = "m", u = "n", v = "o", w = "p", x = "q", y = "r",
z = "s", a = "t", b = "u", c = "v", d = "w", e = "x", f = "y",
g = "z", h = "a", i = "b", j = "c", k = "d")
paste(unname(lookup[cifer.array]), collapse = "")
cifer <- "gluhtlishjrvbadvyyplkaohavbyjpwolypzavvdlhrvuuleatlzzhnlzdpajoavcpnlulyljpwolyrlfdvykpzaolapkkluzftivsvmklhaoputfmhcvypalovsilpuluk"
cifer.array <- unlist(strsplit(cifer, ""))
table(cifer.array)
lookup <- c(l = "e", m = "f", n = "g", o = "h", p = "i", q = "j", r = "k",
s = "l", t = "m", u = "n", v = "o", w = "p", x = "q", y = "r",
z = "s", a = "t", b = "u", c = "v", d = "w", e = "x", f = "y",
g = "z", h = "a", i = "b", j = "c", k = "d")
paste(unname(lookup[cifer.array]), collapse = "")
cifer <- "gluhtlishjrvbadvyyplkaohavbyjpwolypzavvdlhrvuuleatlzzhnlzdpajoavcpnlulyljpwolyrlfdvykpzaolapkkluzftivsvmklhaoputfmhcvypalovsilpulukvwduw ljudeehghyhubwklqvlfrxogilqgsohdvhuhwxuqdqbeoxhsulqwviruydxowdqgdodupghvljqedvgrqrqzkifedqnbrxghflghrqldpvhwwlqjsvdihkrxvhfr"
messa <- "zenameblackoutworriedthatourcipheristooweakonnextmessageswitchtovigenerecipherkeywordisthehiddensymbolofdeathinmyfavoritebeinend"
cifer.array <- unlist(strsplit(cifer, ""))
table(cifer.array)
lookup <- c(l = "e", m = "f", n = "g", o = "h", p = "i", q = "j", r = "k",
s = "l", t = "m", u = "n", v = "o", w = "p", x = "q", y = "r",
z = "s", a = "t", b = "u", c = "v", d = "w", e = "x", f = "y",
g = "z", h = "a", i = "b", j = "c", k = "d")
paste(unname(lookup[cifer.array]), collapse = "")
cifer <- "gluhtlishjrvbadvyyplkaohavbyjpwolypzavvdlhrvuuleatlzzhnlzdpajoavcpnlulyljpwolyrlfdvykpzaolopkkluzftivsvmklhaoputfmhcvypalovsilpulukvwduw ljudeehghyhubwklqvlfrxogilqgsohdvhuhwxuqdqbeoxhsulqwviruydxowdqgdodupghvljqedvgrqrqzkifedqnbrxghflghrqldpvhwwlqjsvdihkrxvhfr"
messa <- "zenameblackoutworriedthatourcipheristooweakonnextmessageswitchtovigenerecipherkeywordisthehiddensymbolofdeathinmyfavoritebeinend"
cifer.array <- unlist(strsplit(cifer, ""))
table(cifer.array)
lookup <- c(l = "e", m = "f", n = "g", o = "h", p = "i", q = "j", r = "k",
s = "l", t = "m", u = "n", v = "o", w = "p", x = "q", y = "r",
z = "s", a = "t", b = "u", c = "v", d = "w", e = "x", f = "y",
g = "z", h = "a", i = "b", j = "c", k = "d")
paste(unname(lookup[cifer.array]), collapse = "")
cifer <- "gluhtlishjrvbadvyyplkaohavbyjpwolypzavvdlhrvuuleatlzzhnlzdpajoavcpnlulyljpwolyrlfdvykpzaolopkkluzftivsvmklhaoputfmhcvypalovsilpulukvwduw"
cifer2 <- "ljudeehghyhubwklqvlfrxogilqgsohdvhuhwxuqdqbeoxhsulqwviruydxowdqgdodupghvljqedvgrqrqzkifedqnbrxghflghrqldpvhwwlqjsvdihkrxvhfr"
messa <- "zenameblackoutworriedthatourcipheristooweakonnextmessageswitchtovigenerecipherkeywordisthehiddensymbolofdeathinmyfavoritebeinend"
cifer.array <- unlist(strsplit(cifer, ""))
cifer2.array <- unlist(strsplit(cifer2, ""))
table(cifer.array)
lookup <- c(l = "e", m = "f", n = "g", o = "h", p = "i", q = "j", r = "k",
s = "l", t = "m", u = "n", v = "o", w = "p", x = "q", y = "r",
z = "s", a = "t", b = "u", c = "v", d = "w", e = "x", f = "y",
g = "z", h = "a", i = "b", j = "c", k = "d")
table(cifer.array)
lookup2 <- c(a = "e", b = "f", c = "g", d = "h", e = "i", f = "j",
g = "k", h = "l", i = "m", j = "n", k = "o", l = "p",
m = "q", n = "r", o = "s", p = "t", q = "u", r = "v",
s = "w", t = "x", u = "y", v = "z", w = "a", x = "b", y = "c",
z = "d")
paste(unname(lookup[cifer.array]), collapse = "")
paste(unname(lookup2[cifer2.array]), collapse = "")
cifer <- "gluhtlishjrvbadvyyplkaohavbyjpwolypzavvdlhrvuuleatlzzhnlzdpajoavcpnlulyljpwolyrlfdvykpzaolopkkluzftivsvmklhaoputfmhcvypalovsilpulukvwduw"
cifer2 <- "ljudeehghyhubwklqvlfrxogilqgsohdvhuhwxuqdqbeoxhsulqwviruydxowdqgdodupghvljqedvgrqrqzkifedqnbrxghflghrqldpvhwwlqjsvdihkrxvhfr"
messa <- "ze name blackout worried that our cipher is too weak on next message switch to vigenere cipher keyword is the hidden symbol of death in my favorite be in end"
cifer.array <- unlist(strsplit(cifer, ""))
cifer2.array <- unlist(strsplit(cifer2, ""))
table(cifer.array)
lookup <- c(l = "e", m = "f", n = "g", o = "h", p = "i", q = "j", r = "k",
s = "l", t = "m", u = "n", v = "o", w = "p", x = "q", y = "r",
z = "s", a = "t", b = "u", c = "v", d = "w", e = "x", f = "y",
g = "z", h = "a", i = "b", j = "c", k = "d")
table(cifer.array)
lookup2 <- c(a = "x", b = "y", c = "z", d = "a", e = "b", f = "c",
g = "d", h = "e", i = "f", j = "g", k = "h", l = "i",
m = "j", n = "k", o = "l", p = "m", q = "n", r = "o",
s = "p", t = "q", u = "r", v = "s", w = "t", x = "u", y = "v",
z = "w")
paste(unname(lookup[cifer.array]), collapse = "")
paste(unname(lookup2[cifer2.array]), collapse = "")
charToRaw(ciph)
ciph <- "Klkbnqlcytfysryucocphgbdizzfcmjwkuchzyeswfogmmetwwossdchrzyldsbwnydednzwnefydthtddbojice"
charToRaw(ciph)
?charToRaw
Sys.setenv(LANGUAGE = "en")
Sys.setenv()
Sys.getenv()
Sys.getenv("Language")
Sys.getenv()
Sys.getenv(LANGUAGE)
Sys.getenv('LANGUAGE')
Sys.getenv('LANGUAGE')
Sys.getenv()
Sys.setenv(LANGUAGE = "en")
rep
rep(list(1,2,3),x[[1]])
x <-list(1,2,3)
?replications
?rep
rep(x,x[[1]])
x
rep(x,x[[1]])
x
rep(x,x[[2]])
fapply <- function(x, f, ...) {
out <- vector("list", length(x))
for (i in seq_along(x)) {
res <- f(x[i], ...)
stopifnot(is.list(x) && is.vector(x))
out[[i]] <- res
}
unlist(out, recursive = FALSE)
}
x <- list(a = 1, b = 2, c = 3)
fapply(x, function(y) rep(y, y[[1]]))
my.list <- list(a = 1, b = 2, c = 3)
fapply(my.list, function(y) rep(y, y[[1]]))
fapply(my.list, function(d) rep(y, y[[1]]))
fapply(my.list, function(c) rep(y, y[[1]]))
fapply(my.list, function(my.list) rep(y, y[[1]]))
fapply(my.list, function(my.list) rep(my.list, my.list[[1]]))
fapply(my.list, function(my.listq) rep(my.listq, my.listq[[1]]))
plot1  = ggplot(data = cars, x= speed, y = dist)
require(ggplot2)
plot1  = ggplot(data = cars, x= speed, y = dist)
plot1
plot2 = ggplot(data = mcars, x= diamonds$carat, y = diamonds$cut)
plot2 = ggplot(data = diamonds, x= carat, y = cut)
plot2
plot1 + geom_point()
plot1  = ggplot(data = cars, x= speed, y = dist)
plot1 + geom_point()
cars$speed
cars$dist
plot1  = ggplot(data = cars, aes(x= speed, y = dist))
plot1 + geom_point()
plot2 = ggplot(data = diamonds, aes(x= carat, y = cut))
plot2 + geom_point()
plot2 + geom_point()
plot2 = ggplot(data = diamonds, aes(x= price, y = cut))
plot2 + geom_point()
plot1 + plot2 + geom_point()
plot = ggplot()
g1 <- plot + geom_point(data = diamons, aes( x = carat, y = price))
g1 <- plot + geom_point(data = diamonds, aes( x = carat, y = price))
g1 <- geom_point(data = diamonds, aes( x = carat, y = price))
g2 <- geom_point(data = cars, aes( x = speed, y = dist))
plot() + g1 +g 2
plot() + g1 + g2
ggplot() + g1 +g 2
ggplot() + g1 + g2
ggplot() + g1 + g2
ggplot() + g1 + g2
clear
objects()
library(devtools)
if (packageVersion("devtools") < "1.9.1") {
message("Please upgrade devtools")
}
devtools::install_deps()
library(devtools)
if (packageVersion("devtools") < "1.9.1") {
message("Please upgrade devtools")
}
devtools::install_deps()
library(devtools)
devtools::install_deps()
devtools::install_deps()
library(root)
library(knitr)
library(plyr)
library(grid)
library(ggplot2)
library(gtable)
library(ggvis)
library(reshape2)
library(grDevices)
library(kohonen)
library(zoo)
library(tidyr)
library(signal)
theme_set(theme_bw(24))
library(dplyr)
source("../general-functions/dplyr-functions.R")
source("../general-functions/ggplot-functions.R")
source("../general-functions/load-functions.R")
mac.gd.path <- "/Users/godot/githubRepos/"
hp.gd.path <- "C:/Users/Godefroy/githubRepos/"
if(Sys.info()['nodename']=="THIM")gd.path <- hp.gd.path else
gd.path <- mac.gd.path
data.path <- paste(gd.path,"affectiveComputing/data/",sep = "/")
#en argument : la liste des noms des fichiers csv à importer
load.data <- function(exp){
filename <- paste(data.path,exp, "_SurEchantillonHF_header.csv", sep="")
# print(filename)
#permet de lancer la fonction load.file sur la liste passée en arguments
assign(paste("data.", exp, sep=""), load.file(filename), envir = .GlobalEnv)
}
"HL", "CLP", "DE", "AW", "DA2", "DA3", "EZ1", "GC1", "IA")
list.exp <- c("AB", "ST", "DA", "LM", "FS1", "PCo", "PCo2", "PCo3", "CW",
list.half.1 <- list.exp[1:floor(length(list.exp)/2)]
list.df <- lapply(list.exp,load.data)
list.half.2 <- list.exp[(floor(length(list.exp)/2)+1):length(list.exp)]
df.all <- do.call(rbind, list.df)
df.all <- fun.calc.duree(df.all)
df.all$nom.experience <- factor(df.all$nom.experience)
list.exp.df <- sapply(list.exp,function(exp){paste('data',exp,sep='.')})
nom.expe <- paste('data',list.exp[2],sep='.')
###########################################################
###################FIN LOAD & PREPARE######################
###########################################################
###########################################################
###################RESPIRATION  ##########################
###########################################################
df.half.1 <- df.all[df.all$nom.experience %in% list.half.1,]
df.half.2 <- df.all[df.all$nom.experience %in% list.half.2,]
plot.evol.par.expe(df.half.1)
plot.evol.par.expe(df.half.2)
df.apprenti <- df.all[df.all$nom.experience %in% c("AB","ST","DA","FS1","CW","AW","EZ1","GC1","IA"),]
df.apprenti.fort <- df.all[df.all$nom.experience %in% c("AB","AW","GC1","IA"),]
plot.evol.par.expe(df.apprenti,titre="effet d'\"apprentissage\"")
source("../general-functions/dplyr-functions.R")
source("../general-functions/ggplot-functions.R")
source("../general-functions/ggplot-functions.R")
source("../general-functions/load-functions.R")
source("../general-functions/ggplot-functions.R")
source("../general-functions/ggplot-functions.R")
source("../general-functions/ggplot-functions.R")
source("../general-functions/ggplot-functions.R")
source("../general-functions/ggplot-functions.R")
source("../general-functions/ggplot-functions.R")
source("../general-functions/load-functions.R")
mac.gd.path <- "/Users/godot/githubRepos/"
hp.gd.path <- "C:/Users/Godefroy/githubRepos/"
if(Sys.info()['nodename']=="THIM")gd.path <- hp.gd.path else
gd.path <- mac.gd.path
data.path <- paste(gd.path,"affectiveComputing/data/",sep = "/")
#en argument : la liste des noms des fichiers csv à importer
load.data <- function(exp){
filename <- paste(data.path,exp, "_SurEchantillonHF_header.csv", sep="")
# print(filename)
#permet de lancer la fonction load.file sur la liste passée en arguments
assign(paste("data.", exp, sep=""), load.file(filename), envir = .GlobalEnv)
}
list.exp <- c("AB", "ST", "DA", "LM", "FS1", "PCo", "PCo2", "PCo3", "CW",
"HL", "CLP", "DE", "AW", "DA2", "DA3", "EZ1", "GC1", "IA")
list.half.1 <- list.exp[1:floor(length(list.exp)/2)]
list.half.2 <- list.exp[(floor(length(list.exp)/2)+1):length(list.exp)]
list.df <- lapply(list.exp,load.data)
df.all <- do.call(rbind, list.df)
df.all$nom.experience <- factor(df.all$nom.experience)
df.all <- fun.calc.duree(df.all)
nom.expe <- paste('data',list.exp[2],sep='.')
list.exp.df <- sapply(list.exp,function(exp){paste('data',exp,sep='.')})
###########################################################
###################FIN LOAD & PREPARE######################
###########################################################
###########################################################
###################RESPIRATION  ##########################
###########################################################
df.half.1 <- df.all[df.all$nom.experience %in% list.half.1,]
df.half.2 <- df.all[df.all$nom.experience %in% list.half.2,]
plot.evol.par.expe(df.half.1)
library(knitr)
library(plyr)
library(grid)
library(ggplot2)
library(gtable)
library(ggvis)
library(reshape2)
library(grDevices)
library(kohonen)
library(zoo)
library(tidyr)
library(signal)
library(dplyr)
theme_set(theme_bw(24))
source("../general-functions/dplyr-functions.R")
source("../general-functions/ggplot-functions.R")
source("../general-functions/load-functions.R")
mac.gd.path <- "/Users/godot/githubRepos/"
hp.gd.path <- "C:/Users/Godefroy/githubRepos/"
if(Sys.info()['nodename']=="THIM")gd.path <- hp.gd.path else
gd.path <- mac.gd.path
data.path <- paste(gd.path,"affectiveComputing/data/",sep = "/")
#en argument : la liste des noms des fichiers csv à importer
load.data <- function(exp){
filename <- paste(data.path,exp, "_SurEchantillonHF_header.csv", sep="")
# print(filename)
#permet de lancer la fonction load.file sur la liste passée en arguments
assign(paste("data.", exp, sep=""), load.file(filename), envir = .GlobalEnv)
}
list.exp <- c("AB", "ST", "DA", "LM", "FS1", "PCo", "PCo2", "PCo3", "CW",
"HL", "CLP", "DE", "AW", "DA2", "DA3", "EZ1", "GC1", "IA")
list.half.1 <- list.exp[1:floor(length(list.exp)/2)]
list.half.2 <- list.exp[(floor(length(list.exp)/2)+1):length(list.exp)]
list.df <- lapply(list.exp,load.data)
df.all <- do.call(rbind, list.df)
df.all$nom.experience <- factor(df.all$nom.experience)
df.all <- fun.calc.duree(df.all)
nom.expe <- paste('data',list.exp[2],sep='.')
list.exp.df <- sapply(list.exp,function(exp){paste('data',exp,sep='.')})
###########################################################
###################FIN LOAD & PREPARE######################
###########################################################
###########################################################
###################RESPIRATION  ##########################
###########################################################
df.half.1 <- df.all[df.all$nom.experience %in% list.half.1,]
df.half.2 <- df.all[df.all$nom.experience %in% list.half.2,]
plot.evol.par.expe(df.half.1)
plot.evol.par.expe(df.half.2)
df.apprenti <- df.all[df.all$nom.experience %in% c("AB","ST","DA","FS1","CW","AW","EZ1","GC1","IA"),]
df.apprenti.fort <- df.all[df.all$nom.experience %in% c("AB","AW","GC1","IA"),]
plot.evol.par.expe(df.apprenti,titre="effet d'\"apprentissage\"")
plot.evol.par.expe(df.apprenti.fort,titre="effet d'\"apprentissage\" fort")
plot.evol.par.expe(df.all[df.all$tps.ecoule<100,],titre="premiers instants")
df.comp.ampl <- df.all[df.all$nom.experience %in% c("AB","CW"),]
plot.evol.par.expe(df.comp.ampl,titre="comparaison de l'amplitude")
df.comp.ampl2 <- df.all[df.all$nom.experience %in% c("DE","CLP"),]
plot.evol.par.expe(df.comp.ampl2,titre="amplitude, autre exemple")
df.seuil <- df.all[df.all$nom.experience %in% c("AB","LM","CLP","DA","DA2","DA3"),]
plot.evol.par.expe(df.seuil,titre="Seuil bas")
source("../general-functions/dplyr-functions.R")
source("../general-functions/ggplot-functions.R")
source("../general-functions/load-functions.R")
plot.evol.par.expe(df.half.1)
df.seuil <- df.all[df.all$nom.experience %in% c("AB","LM","CLP","DA","DA2","DA3"),]
plot.evol.par.expe(df.seuil,titre="Seuil bas")
df.seuil2 <- df.all[df.all$nom.experience %in% c("DA"),]
plot.evol.par.expe(df.seuil2,titre="Seuil bas, exemples")
df.seuil2 <- df.all[df.all$nom.experience %in% c("DA"),10000:-1]
df.seuil2 <- df.all[df.all$nom.experience %in% c("DA"),10000:nrow(df.all)]
df.seuil2 <- df.all[df.all$nom.experience %in% c("DA"),10000:nrow(df.all)]
nrow(df.all)
df.seuil2 <- df.all[df.all$nom.experience %in% c("DA") & df.all$quart.temps == "4",]
plot.evol.par.expe(df.seuil2,titre="Seuil bas, exemples")
str(df.all$quart.temps)
df.seuil2 <- df.all[df.all$nom.experience %in% c("DA") & df.all$quart.temps == "4eme",]
plot.evol.par.expe(df.seuil2,titre="Seuil bas, exemples")
df.seuil3 <- df.all[df.all$nom.experience %in% c("DA3"),]
plot.evol.par.expe(df.seuil3[1:5000,],titre="Seuil bas en détail")
df.seuil <- df.all[df.all$nom.experience %in% c("AB","LM","CLP","DA","DA2","DA3"),]
plot.evol.par.expe(df.seuil,titre="Seuil bas")
df.apprenti <- df.all[df.all$nom.experience %in% c("AB","ST","DA","FS1","CW","AW","EZ1","GC1","IA"),]
df.apprenti.fort <- df.all[df.all$nom.experience %in% c("AB","AW","GC1","IA"),]
plot.evol.par.expe(df.apprenti,titre="effet d'\"apprentissage\"")
plot.evol.par.expe(df.apprenti.fort,titre="effet d'\"apprentissage\" fort")
range(df.apprenti.fort$date)
ggvis(df.apprenti.fort) + group_by(.date)
ggvis(df.apprenti.fort) %>% group_by(date)
ggvis(df.apprenti.fort, ~date) %>% group_by(date)
ggvis(df.apprenti.fort, ~date) %>% group_by(nom.experience)
df.apprenti.fort %>% group_by(nom.experience) %>% summarise(tps = max(date) - min(date))
df.comp.ampl2 <- df.all[df.all$nom.experience %in% c("DE","CLP"),]
plot.evol.par.expe(df.comp.ampl2,titre="amplitude, autre exemple")
df.comp.ampl <- df.all[df.all$nom.experience %in% c("AB","CW"),]
plot.evol.par.expe(df.comp.ampl,titre="comparaison de l'amplitude")
plot.evol.par.expe(df.apprenti,titre="effet d'\"apprentissage\"")
plot.evol.par.expe(df.apprenti.fort,titre="effet d'\"apprentissage\" fort")
plot.evol.par.expe(df.all[df.all$tps.ecoule<100,],titre="premiers instants")
plot.evol.par.expe(df.apprenti,titre="diminution de tension de la ceinture")
plot.evol.par.expe(df.apprenti.fort,titre="diminution tension ceinture fort")
plot.evol.par.expe(df.all[df.all$tps.ecoule<100,],titre="premiers instants")
df.apprenti.fort <- df.all[df.all$nom.experience %in% c("AB","AW","GC1","IA"),]
plot.evol.par.expe(df.apprenti.fort,titre="diminution tension ceinture fort")
(rstudio.ide())
rstudio.ide()
rstudio
hf <- butter(1, 1/1000, type="high")
data.AW.m <- data.AW[!(data.AW$respiration == 0),]
aw.bf <- butter(1, 1/20, type="low")
data.CLP.m <- data.CLP[1:17000,]
clp.bf <- butter(1, 1/20, type="low")
data.CW.m <- data.CW
data.DA.m <- data.DA[!(data.DA$respiration > -5),]
data.DA2.m <- NULL
data.DA3.m <- NULL
data.DE.m <- data.DE
de.bf <- butter(1, 1/50, type="low")
data.EZ1.m <- data.EZ1
bf <- butter(1, 1/80, type="low")
data.FS1.m <- data.FS1[!(data.FS1$respiration == 0 | abs(data.FS1$respiration) >25),]
#bizarre : ggplot(data = data.FS1.m, aes(x = as.numeric(date),y = respiration)) + geom_line(size=1/10, col = "blue")
data.FS1.m <- NULL #??
data.GC1.m <- data.GC1
#comment interpéter les piques ??
#passer un loess en plus ?
chrono.plot.direct(data.GC1.m, mesure = "resp.low.f")
data.GC1.m$resp.lf.lo <- loess(data.GC1.m$resp.low.f ~ as.numeric(data.GC1.m$date),degree=1,span=.02)$fitted
chrono.plot.direct(data.GC1.m, mesure = "resp.low.f")
source("../general-functions/ggplot-functions.R")
chrono.plot.direct(data.GC1.m, mesure = "resp.low.f")
library(ggvis)
library(reshape2)
library(grDevices)
library(kohonen)
library(zoo)
library(tidyr)
library(signal)
library(dplyr)
theme_set(theme_bw(24))
source("../general-functions/dplyr-functions.R")
source("../general-functions/ggplot-functions.R")
source("../general-functions/load-functions.R")
chrono.plot.direct(data.AB,"respiration",.01,taille=1000,names="AB")
ggplot(data = data.HL.m, aes(x = as.numeric(date),y = resp.lf.lo)) + geom_line(col = "red") +
ggplot(data = data.HL.m, aes(x = as.numeric(date),y = resp.lf.lo)) + geom_line(col = "red") +
geom_line(data = data.HL.m, aes(x = as.numeric(date),y = resp.low.f), col = "blue")
data.LM.m <- NULL
bf <- butter(1, 1/100, type="low")
data.HL.m$resp.high.f <- signal::filter(hf,data.HL.m$respiration)
data.HL.m$resp.low.f <- signal::filter(bf,data.HL.m$respiration)
ggplot(data = data.HL.m, aes(x = as.numeric(date),y = resp.lf.lo)) + geom_line(col = "red") +
geom_line(data = data.HL.m, aes(x = as.numeric(date),y = resp.low.f), col = "blue")
df <-data.frame(data.CW$date[1:lg],b,data.CW$respiration[1:lg])
colnames(df) <- c("date","filter.low","respi")
clp.bf <- butter(1, 1/20, type="low")
data.CW.m <- data.CW
data.DA.m <- data.DA[!(data.DA$respiration > -5),]
data.DA2.m <- NULL
data.DA3.m <- NULL
data.DE.m <- data.DE
de.bf <- butter(1, 1/50, type="low")
data.EZ1.m <- data.EZ1
bf <- butter(1, 1/80, type="low")
data.FS1.m <- data.FS1[!(data.FS1$respiration == 0 | abs(data.FS1$respiration) >25),]
#bizarre : ggplot(data = data.FS1.m, aes(x = as.numeric(date),y = respiration)) + geom_line(size=1/10, col = "blue")
data.FS1.m <- NULL #??
data.GC1.m <- data.GC1
#comment interpéter les piques ??
#passer un loess en plus ?
chrono.plot.direct(data.GC1.m, mesure = "resp.low.f")
data.GC1.m$resp.lf.lo <- loess(data.GC1.m$resp.low.f ~ as.numeric(data.GC1.m$date),degree=1,span=.02)$fitted
data.LM.m <- NULL
bf <- butter(1, 1/100, type="low")
data.HL.m$resp.high.f <- signal::filter(hf,data.HL.m$respiration)
data.HL.m$resp.low.f <- signal::filter(bf,data.HL.m$respiration)
ggplot(data = data.HL.m, aes(x = as.numeric(date),y = resp.lf.lo)) + geom_line(col = "red") +
geom_line(data = data.HL.m, aes(x = as.numeric(date),y = resp.low.f), col = "blue")
df <-data.frame(data.CW$date[1:lg],b,data.CW$respiration[1:lg])
bf <- butter(1, 1/100, type="low")
data.HL.m$resp.high.f <- signal::filter(hf,data.HL.m$respiration)
data.LM.m <- NULL
bf <- butter(1, 1/100, type="low")
data.HL.m$resp.high.f <- signal::filter(hf,data.HL.m$respiration)
plot.evol.par.expe(df.half.1)
chrono.plot.direct <- function(data, variable, transp, taille, names, offset = 0){
g <- ggplot(data[offset:(offset + taille),], aes_string("date",variable, alpha = transp)) +
geom_point()
}
chrono.plot.direct(data.AB,"respiration",.01,taille=1000,names="AB")
chrono.plot.direct <- function(data, variable, transp, taille, names, offset = 0){
g <- ggplot(data[offset:(offset + taille),], aes_string("date",variable, alpha = transp)) +
geom_point()
g
}
chrono.plot.direct(data.AB,"respiration",.01,taille=1000,names="AB")
chrono.plot.direct <- function(data, variable, transp, taille, names, offset = 0){
g <- ggplot(data[offset:(offset + taille),], aes_string("date",variable, alpha = transp), color = "blue") +
geom_point()
g
}
chrono.plot.direct(data.AB,"respiration",.01,taille=1000,names="AB")
