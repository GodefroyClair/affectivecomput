library(knitr)
library(grid)
library(gtable)
library(reshape2)
library(grDevices)
library(signal)
library(dplyr)
library(testthat)
theme_set(theme_bw(24))
############################################################
#######################LOAD & PREP #########################
############################################################
source("../RGeneralFunctions/ggplot-functions.R")
#filter high freq
source("../RGeneralFunctions/clean-filters-functions.R")
source("../RGeneralFunctions/cleaning-functions.R")
source("./functions/load_df-all.R")
#for plot_ho
source(file = "./functions/kohonen_graph.R")
df_all <- import_df_all()
df_half_1 <- df_all[df_all$nom.experience %in% list_half_1,]
df_half_2 <- df_all[df_all$nom.experience %in% list_half_2,]
###########################################################
###################FIN LOAD & PREPARE######################
###########################################################
if(PRINT) {
plot.evol.par.expe(df_half_1, mesure = "activite.electrodermale")
plot.evol.par.expe(df_half_2, mesure = "activite.electrodermale")
}
#voir :
#http://theses.univ-lyon2.fr/documents/getpart.php?id=lyon2.2010.baltenneck_n&part=275513
#http://theses.univ-lyon2.fr/documents/getpart.php?id=lyon2.2010.baltenneck_n&part=275552
#+++++++++++++++++++++#
####EXPE VIZ CHECK#####
#+++++++++++++++++++++#
if(PRINT){
df_transp <- df_all %>% select(date, nom.experience, activite.electrodermale, tps.ecoule, quart.temps)
#create the function for plotting
plot_transp <- plot_var_exp_ho(df_all, "activite.electrodermale")
#AB:(highpeak-end),
#jump 4/5
plot_transp("AB")
#LM:ok-upsacle,
#jump 2/3
plot_transp("LM")
# EZ1:ok-peak?,
#jump 2/3
plot_transp("EZ1")
#FS1:ok-upscale,
#jump 2/3
plot_transp("FS1")
# CLP:ok-peaks,
#learning ?
#jump 2/3
plot_transp("CLP")
#DA:
plot_transp("DA")
# PCo:ok-upslope,
plot_transp("PCo")
# CW:ok-debut,downslope?,
#learning ?
plot_transp("CW")
# DE:ok-debut?,
#learning ?
plot_transp("DE")
# AW:ok,
#jump 2/3
plot_transp("AW")
# IA:?
#jump 2/3
plot_transp("IA")
# DA2:ok?-downslope,
#jump 4/5
plot_transp("DA2")
# DA3:ok,
plot_transp("DA3")
# PCo2:ok-peaks,
plot_transp("PCo2")
# PCo3:ok-peaks,
#jump 4/5
plot_transp("PCo3")
##NO###
#ST:no:flat,
plot_transp("ST")
# HL:no-flat,
plot_transp("HL")
## A NETTOYER !!!
# GC1:ok?,
plot_transp("GC1")
}
####################
######TRANSFO#######
####################
################
###NETTOYAGE####
################
#ST & HL:
df_all <- df_all %>%
mutate(elecderm_clean = replace(activite.electrodermale, nom.experience %in% c("ST", "HL"), NA))
##test
test_df <- df_all %>%
filter(nom.experience %in% c("ST","HL")) %>% select(elecderm_clean)
expect_true(all(is.na(test_df)))
rm(test_df)
##GC1##
#-----#
gc1_transpi <- df_all %>% filter(nom.experience == "GC1")
m_gc1 <- round(mean(gc1_transpi$activite.electrodermale, na.rm = T),4)
gc1_transpi <- gc1_transpi %>% mutate( elecderm_clean =
clean_high_freq(activite.electrodermale - m_gc1, 1/150) + m_gc1)
df_all[df_all$nom.experience == "GC1",]$elecderm_clean <- gc1_transpi$elecderm_clean
##FAIL TRY
#filter GC1 data with a low pass filter
#df_all[df_all$nom.experience == "GC1",] <-
#  df_all %>% filter(nom.experience == "GC1") %>%
#  mutate(elecderm_clean = clean_high_freq(activite.electrodermale, 1/150))
if (PRINT) {
gg <- plot_var_exp_ho(gc1_transpi, "activite.electrodermale")("GC1", print = F)
gg + ylim(c(-48, -39))
gg <- plot_var_exp_ho(gc1_transpi, "elecderm_clean")("GC1", print = F)
gg + ylim(c(-48, -39))
}
##################
## ADD COLUMNS ###
##################
### ADD var with high frequencies filtered ###
##use of a low pass filter
## clean_low_freq can't deal with NA's...
df_all <- df_all %>% group_by(nom.experience) %>%
mutate(.,elecderm_low_f2 =
ifelse(!is.na(elecderm_clean),
clean_high_freq(elecderm_clean - mean(elecderm_clean, na.rm = T), 1/100) +
mean(elecderm_clean, na.rm = T),
elecderm_clean))
#any(df_all$elecderm_low_f != df_all$elecderm_low_f2, na.rm = T)
### ADD variation variable ###
df_all <- df_all %>% group_by(nom.experience) %>% mutate(elecderm_diff = elecderm_clean - lag(elecderm_clean))
df_all <- df_all %>% group_by(nom.experience) %>% mutate(elecderm_low_diff = elecderm_low_f - lag(elecderm_low_f))
#df_all[is.na(df_all$elecderm_diff),"elecderm_diff"] <- 0.0
if(PRINT){
df_half_1 <- df_all[df_all$nom.experience %in% list_half_1,]
df_half_2 <- df_all[df_all$nom.experience %in% list_half_2,]
plot.evol.par.expe(df_half_1[df_half_1$nom.experience == "AB",], mesure = "elecderm_clean")
plot.evol.par.expe(df_half_1[df_half_1$nom.experience == "AB",], mesure = "elecderm_low_f")
plot.evol.par.expe(df_half_1, mesure = "activite.electrodermale")
plot.evol.par.expe(df_half_2, mesure = "activite.electrodermale")
#missing values
suppressWarnings(plot.evol.par.expe(df_half_1, mesure = "elecderm_clean"))
suppressWarnings(plot.evol.par.expe(df_half_2, mesure = "elecderm_clean"))
suppressWarnings(plot.evol.par.expe(df_half_1, mesure = "elecderm_low_f"))
suppressWarnings(plot.evol.par.expe(df_half_2, mesure = "elecderm_low_f"))
suppressWarnings(plot.evol.par.expe(df_half_1, mesure = "elecderm_diff"))
suppressWarnings(plot.evol.par.expe(df_half_2, mesure = "elecderm_diff"))
plot.evol.par.expe(df_half_1[df_half_2$nom.experience == "IA",], mesure = "elecderm_diff")
suppressWarnings(plot.evol.par.expe(df_half_1, mesure = "elecderm_low_diff"))
suppressWarnings(plot.evol.par.expe(df_half_2, mesure = "elecderm_low_diff"))
}
save(df_all, file = "./data/df_transpi.RDa")
df_add <- df_all %>% select(elecderm_clean, elecderm_low_f, elecderm_diff, elecderm_low_diff)
names(df_all)
df_all <- df_all %>% group_by(nom.experience) %>%
mutate(.,elecderm_low_f =
ifelse(!is.na(elecderm_clean),
clean_high_freq(elecderm_clean - mean(elecderm_clean, na.rm = T), 1/100) +
mean(elecderm_clean, na.rm = T),
elecderm_clean))
df_add <- df_all %>% select(elecderm_clean, elecderm_low_f, elecderm_diff, elecderm_low_diff)
df_all <- df_all %>% group_by(nom.experience) %>%
mutate(.,elecderm_low_f =
ifelse(!is.na(elecderm_clean),
clean_high_freq(elecderm_clean - mean(elecderm_clean, na.rm = T), 1/100) +
mean(elecderm_clean, na.rm = T),
elecderm_clean))
df_add <- df_all %>% select(elecderm_clean, elecderm_low_f, elecderm_diff, elecderm_low_diff)
names(df_all)
df_add <- df_all %>% select(elecderm_clean, elecderm_low_f, elecderm_diff, elecderm_low_diff)
df_add <- df_all %>% select(elecderm_clean, elecderm_low_f, elecderm_diff, elecderm_low_diff)
df_all <- df_all %>% group_by(nom.experience) %>% mutate(elecderm_diff = elecderm_clean - lag(elecderm_clean))
df_all <- df_all %>% group_by(nom.experience) %>% mutate(elecderm_low_diff = elecderm_low_f - lag(elecderm_low_f))
df_add <- df_all %>% select(elecderm_clean, elecderm_low_f, elecderm_diff, elecderm_low_diff)
save(df_add, file = "./data/df_transpi.RDa")
names(df_add)
class(df_add)
str(df_add)
df_add <- df_all %>% select(elecderm_clean, elecderm_low_f, elecderm_diff, elecderm_low_diff) %>% as.data.frame()
class(df_add)
names(df_add)
save(df_add, file = "./data/df_transpi.RDa")
save(as.data.frame(df_all), file = "./data/df_transpi.RDa")
save(df_all, file = "./data/df_transpi.RDa")
df_add <- df_all %>% select(temp_clean, temp_low_f, temp_diff, temp_low_diff) %>% as.data.frame()
#######################
######TEMPERATURE######
#######################
if (!exists("DEBUG")) DEBUG <- FALSE
if (!exists("PRINT")) PRINT <- FALSE
library(knitr)
library(grid)
library(ggplot2)
library(gtable)
library(reshape2)
library(grDevices)
library(signal)
library(dplyr)
theme_set(theme_bw(24))
############################################################
#######################LOAD & PREP #########################
############################################################
source("../RGeneralFunctions/ggplot-functions.R")
source("./functions/load_df-all.R")
source("../RGeneralFunctions/clean-filters-functions.R")
source("../RGeneralFunctions/cleaning-functions.R")
#for plot_ho
source(file = "./functions/kohonen_graph.R")
df_all <- import_df_all()
df_half_1 <- df_all[df_all$nom.experience %in% list_half_1,]
df_half_2 <- df_all[df_all$nom.experience %in% list_half_2,]
###########################################################
###################FIN LOAD & PREPARE######################
###########################################################
#plot.evol.par.expe(df_half_1, mesure = "temperature")
#plot.evol.par.expe(df_half_2, mesure = "temperature")
if (PRINT) {
plot.evol.par.expe(df_half_1, mesure = "temperature", titre = "température 1ere partie des expé")
plot.evol.par.expe(df_half_2, mesure = "temperature", titre = "température 2nde moitié des expé")
plot.evol.par.expe(df_half_1, mesure = "temperature", lim.bas=20, lim.haut = 35, titre = "température 1ere partie des expé")
plot.evol.par.expe(df_half_2, mesure = "temperature", lim.bas=20, lim.haut = 35, titre = "température 2nde moitié des expé")
}
#######################
### VISUALIZATION  ####
#######################
if (PRINT) {
df_DA <- df_all %>% filter(nom.experience == "DA", tps.ecoule < 50)
plot.evol.par.expe(df_DA,titre="expérience DA, valeur proche de 0", mesure = "temperature")
df_DA_clean <- df_all %>% filter(nom.experience == "DA", tps.ecoule < 50, temperature >8)
plot.evol.par.expe(df_DA_clean,titre="expérience DA, valeurs inf à 9 nettoyées", mesure = "temperature")
plot.evol.par.expe(df_all[df_all$tps.ecoule<10,], mesure = "temperature", titre="premiers instants")
plot.evol.par.expe(df_half_1[df_half_1$tps.ecoule<5,], mesure = "temperature", titre="premiers instants")
plot.evol.par.expe(df_half_2[df_half_2$tps.ecoule<5,], mesure = "temperature", titre="premiers instants")
df.deb <- df.all %>% filter(tps.ecoule < 100)
ggplot(df.deb,aes(x = as.numeric(tps.ecoule), y = temperature, col=nom.experience)) + geom_path(size=.5)
ggplot(df.deb,aes(x = as.numeric(tps.ecoule), y = temperature, col=nom.experience)) + geom_path(size=.5) + ylim(c(20,35))
df.deb.AB <- df.deb %>% filter(nom.experience == "AB")
plot.evol.par.expe(df.deb.AB,titre="expérience AB", mesure = "temperature")
df.deb <- df.all %>% filter(nom.experience == "AW", tps.ecoule < 75)
plot.evol.par.expe(df.deb,titre="expérience AW", mesure = "temperature")
}
###################
#### EXPE VIZ #####
###################
df_temp <- df_all %>% select(date, nom.experience, temperature, tps.ecoule, quart.temps)
show_temp <- function(nom.exp) {
df_temp_exp <- df_temp %>% filter(nom.experience == nom.exp)
gg <- ggplot(df_temp_exp, aes(x = date, y = temperature)) +
geom_path() +
ggtitle(paste("temperature", nom.exp))
print(gg)
}
if (PRINT){
#AB:29-33.5 : 4 deg ???
show_temp("AB")
#DA: !! signal off in the beginging
show_temp("DA")
#LM:22.9 to 23.05 : .15 deg
show_temp("LM")
#FS1:21.5 to 22.5 : 1 deg
show_temp("FS1")
# PCo:22.2 to 23 : 0.8 deg
show_temp("PCo")
# CW:32.5 to 35 : 2.5 deg ?
show_temp("CW")
# CLP: 26 to 27.4 weird downslope : 1.4 deg
show_temp("CLP")
# DE: 26 to 32 : 6 deg ???
show_temp("DE")
# AW: 30.4 to 32 : 1.6 deg
show_temp("AW")
# EZ1: 23.4 to 24.6 : 1.2 deg
show_temp("EZ1")
# IA: 23.5 to 26.2 : 2.7 deg ?
show_temp("IA")
# DA2: 28.8 to 29.3 : 0.5 deg
show_temp("DA2")
# DA3: 27 to 28.5 : 1.5 deg
show_temp("DA3")
# PCo2: 21.7 to 22.4 : 0.7 deg
show_temp("PCo2")
# PCo3 : 22.15 to 22.4 : 0.25 deg:
show_temp("PCo3")
#ST: 26.2 to 27.2 : 1 deg
show_temp("ST")
# HL: 22.5 to 23 : 0.5 deg
show_temp("HL")
##NETTOYER
# GC1: 23.5 to 24.7 : 1.2 deg
show_temp("GC1")
}
###############
### CLEAN  ####
###############
### ELIMINATE : AB, IA, CW, DE
df_all <- df_all %>%
mutate(temp_clean = replace(temperature, nom.experience %in% c("AB", "IA", "CW", "DE"), NA))
#test
test <- df_all %>% filter(nom.experience %in% c("AB", "IA", "CW", "DE"))
expect_true(any(is.na(test$temp_clean)))
### remove signal off from DA
df_all <- df_all %>% mutate(temp_clean = replace(temp_clean, temperature < 10, NA))
#test
expect_equal(which(df_all$temperature < 10), 98153)
expect_equal(length(which(df_all$temperature < 10)), 1)
expect_length(which(df_all$temp_clean < 10),0)
#######################
### ADD VARIABLES  ####
#######################
### ADD lowpass_filter ###
##use of a low pass filter
## clean_low_freq can't deal with NA's...
df_all <- df_all %>% group_by(nom.experience) %>%
mutate(., temp_low_f =
ifelse(!is.na(temp_clean),
clean_high_freq(temp_clean[!is.na(temp_clean)] - mean(temp_clean, na.rm = T), 1/100) +
mean(temp_clean, na.rm = T),
temp_clean))
#df_all$temp_low <- NA
#m_tmp <- mean(df_all$temp_clean, na.rm = T)
#df_all$temp_low[!is.na(df_all$temp_clean)] <- clean_high_freq(df_all$temp_clean[!is.na(df_all$temp_clean)] - m_tmp, 1/100) + m_tmp
### ADD diff ####
df_all <- df_all %>% group_by(nom.experience) %>% mutate(temp_diff = temp_clean - lag(temp_clean))
df_all <- df_all %>% group_by(nom.experience) %>% mutate(temp_low_diff = temp_low_f - lag(temp_low_f))
if(PRINT){
df_half_1 <- df_all[df_all$nom.experience %in% list_half_1,]
df_half_2 <- df_all[df_all$nom.experience %in% list_half_2,]
plot.evol.par.expe(df_half_1[df_half_1$nom.experience == "DA",], mesure = "temp_clean")
plot.evol.par.expe(df_half_1[df_half_1$nom.experience == "DA",], mesure = "temp_low_f")
plot.evol.par.expe(df_half_1[df_half_1$nom.experience == "DA",], mesure = "temp_low")
plot.evol.par.expe(df_half_1, mesure = "temperature")
plot.evol.par.expe(df_half_2, mesure = "temperature")
#missing values
suppressWarnings(plot.evol.par.expe(df_half_1, mesure = "temp_clean"))
suppressWarnings(plot.evol.par.expe(df_half_2, mesure = "temp_clean"))
suppressWarnings(plot.evol.par.expe(df_half_1, mesure = "temp_low_f"))
suppressWarnings(plot.evol.par.expe(df_half_2, mesure = "temp_low_f"))
suppressWarnings(plot.evol.par.expe(df_half_1, mesure = "temp_diff"))
suppressWarnings(plot.evol.par.expe(df_half_2, mesure = "temp_diff"))
suppressWarnings(plot.evol.par.expe(df_half_1, mesure = "temp_low_diff"))
suppressWarnings(plot.evol.par.expe(df_half_2, mesure = "temp_low_diff"))
}
save(df_all, file = "./data/df_temp.RDa")
df_add <- df_all %>% select(freqcard_clean, freqcard_low_f, freqcard_diff, freqcard_low_diff) %>% as.data.frame()
save(df_add, file = "./data/df_freqcard_add.RDa")
suppressWarnings(plot.evol.par.expe(df_half_1, mesure = "freqcard_clean"))
df_add <- df_all %>% select(temp_clean, temp_low_f, temp_diff, temp_low_diff) %>% as.data.frame()
save(df_add, file = "./data/df_temp_add.RDa")
#############################################################
################# FREQUENCE CARDIAQUE #######################
#############################################################
if (!exists("DEBUG")) DEBUG <- FALSE
if (!exists("PRINT")) PRINT <- FALSE
library(knitr)
library(grid)
library(ggplot2)
library(gtable)
library(reshape2)
library(grDevices)
library(signal)
library(dplyr)
theme_set(theme_bw(24))
############################################################
#######################LOAD & PREP #########################
############################################################
source("../RGeneralFunctions/ggplot-functions.R")
source("./functions/load_df-all.R")
source("../RGeneralFunctions/clean-filters-functions.R")
source("../RGeneralFunctions/cleaning-functions.R")
#for plot_ho
source(file = "./functions/kohonen_graph.R")
df_all <- import_df_all()
df_half_1 <- df_all[df_all$nom.experience %in% list_half_1,]
df_half_2 <- df_all[df_all$nom.experience %in% list_half_2,]
###########################################################
###################FIN LOAD & PREPARE######################
###########################################################
plot.evol.par.expe(df_half_1, mesure = "frequence.cardiaque")
plot.evol.par.expe(df_half_2, mesure = "frequence.cardiaque")
#AB:ok, ST:ok,DA:ok-debut?, LM:ok, FS1:ok, PCo:ok, PCo2:ok, PCo3:ok, CW:ok,HL:ok,CLP:ok, DE:ok-début?, AW:ok-zeros, DA2:ok, DA3:ok, EZ1:ok,GC1:ok-zero,IA:ok
####EXPE OK#####
df_freq_card <- df_all %>% select(date, nom.experience, frequence.cardiaque, tps.ecoule, quart.temps)
show_freq_card <- function(nom.exp) {
df_freq_card_exp <- df_freq_card %>% filter(nom.experience == nom.exp)
gg <- ggplot(df_freq_card_exp, aes(x = date, y = frequence.cardiaque)) +
geom_path() +
ggtitle(paste("frequence card", nom.exp))
print(gg)
}
#AB:(highpeak-end),
show_freq_card("AB")
#DA:ok,
show_freq_card("DA")
#LM:ok-upsacle,
show_freq_card("LM")
#FS1:ok-upscale,
show_freq_card("FS1")
# PCo:ok-upslope,
show_freq_card("PCo")
# CW:ok-debut,downslope?,
show_freq_card("CW")
# CLP:ok-peaks à 110,
show_freq_card("CLP")
# DE:ok-debut?,
show_freq_card("DE")
# EZ1:ok-peak?,
show_freq_card("EZ1")
# IA: peak a 110?
show_freq_card("IA")
# DA2:ok?-downslope,
show_freq_card("DA2")
# DA3:ok,
show_freq_card("DA3")
# PCo2:ok-peaks,
show_freq_card("PCo2")
# PCo3:ok-peaks,
show_freq_card("PCo3")
##NO###
#ST:no:flat,
show_freq_card("ST")
# HL:no-flat,
show_freq_card("HL")
##NETTOYER
# GC1:ok?,
show_freq_card("GC1")
# AW: signal off
show_freq_card("AW")
###############
### CLEAN  ####
###############
### remove signal off from DA
df_all <- df_all %>% mutate(freqcard_clean = replace(frequence.cardiaque, frequence.cardiaque == 0, NA))
#test
expect_equal(length(which(df_all$frequence.cardiaque == 0)), 476)
expect_length(which(df_all$freqcard_clean == 0),0)
#######################
### ADD VARIABLES  ####
#######################
### ADD lowpass_filter ###
##use of a low pass filter
## clean_low_freq can't deal with NA's...
df_all <- df_all %>% group_by(nom.experience) %>%
mutate(., freqcard_low_f =
ifelse(!is.na(freqcard_clean),
clean_high_freq(freqcard_clean[!is.na(freqcard_clean)] - mean(freqcard_clean, na.rm = T), 1/100) +
mean(freqcard_clean, na.rm = T),
freqcard_clean))
#df_all$freqcard_low <- NA
#m_tmp <- mean(df_all$freqcard_clean, na.rm = T)
#df_all$freqcard_low[!is.na(df_all$freqcard_clean)] <- clean_high_freq(df_all$freqcard_clean[!is.na(df_all$freqcard_clean)] - m_tmp, 1/100) + m_tmp
### ADD diff ####
df_all <- df_all %>% group_by(nom.experience) %>% mutate(freqcard_diff = freqcard_clean - lag(freqcard_clean))
df_all <- df_all %>% group_by(nom.experience) %>% mutate(freqcard_low_diff = freqcard_low_f - lag(freqcard_low_f))
if(PRINT){
df_half_1 <- df_all[df_all$nom.experience %in% list_half_1,]
df_half_2 <- df_all[df_all$nom.experience %in% list_half_2,]
plot.evol.par.expe(df_half_1[df_half_1$nom.experience == "DA",], mesure = "freqcard_clean")
plot.evol.par.expe(df_half_1[df_half_1$nom.experience == "DA",], mesure = "freqcard_low_f")
plot.evol.par.expe(df_half_1, mesure = "frequence.cardiaque")
plot.evol.par.expe(df_half_2, mesure = "frequence.cardiaque")
#missing values
suppressWarnings(plot.evol.par.expe(df_half_1, mesure = "freqcard_clean"))
suppressWarnings(plot.evol.par.expe(df_half_2, mesure = "freqcard_clean"))
suppressWarnings(plot.evol.par.expe(df_half_1, mesure = "freqcard_low_f"))
suppressWarnings(plot.evol.par.expe(df_half_2, mesure = "freqcard_low_f"))
suppressWarnings(plot.evol.par.expe(df_half_1, mesure = "freqcard_diff"))
suppressWarnings(plot.evol.par.expe(df_half_2, mesure = "freqcard_diff"))
suppressWarnings(plot.evol.par.expe(df_half_1, mesure = "freqcard_low_diff"))
suppressWarnings(plot.evol.par.expe(df_half_2, mesure = "freqcard_low_diff"))
}
save(df_all, file = "./data/df_freqcard.RDa")
save(df_all, file = "./data/df_freqcard.RDa")
df_add <- df_all %>% select(freqcard_clean, freqcard_low_f, freqcard_diff, freqcard_low_diff) %>% as.data.frame()
save(df_add, file = "./data/df_freqcard_add.RDa")
l.na <- which(is.na(data_PCo),arr.ind = T)
ncol.1 <- l.na[1,2]
l.na <- which(is.na(df_all), arr.ind =  T)
ncol.1 <- l.na[1,2]
ncol.2 <- l.na[2,2]
ncol.2
df_all[l.na[1],ncol.1]
ncol.1 <- l.na[1,2]
ncol.1
ncol.2
df_all[l.na[1],ncol.1]
df_all[l.na[1],]
lg_na <- which(is.na(df_all$respiration))
lg_na
lg_na <- which(is.na(df_all$respiration))
df_all$respiration[lg_na,] <- df_all$respiration[lg_na[1]-1]
df_all$respiration[lg_na] <- df_all$respiration[lg_na[1]-1]
df_all$respiration[lg_na] <- df_all$respiration[lg_na-1]
df_all$respiration[lg_na-1]
if(any(is.na(df_all)))stop("still na data...")
if(any(is.na(df_all$respiration)))stop("still na data...")
lg_na <- which(is.na(df_all$respiration))
df_all$respi_clean <- df_all$respiration
df_all$respi_clean[lg_na] <- df_all$respiration[lg_na-1]
if(any(is.na(df_all$respi_clean)))stop("still na data in respiration measurement...")
df_transpi <- load("./data/df_transpi.RDa")
df_transpi <- load("./data/df_transpi.RDa")
df_temp <- load("./data/df_temp.RDa")
df_freq_card <- load("./data/df_freqcard.RDa")
df_resp <- load("./data/df_resp.RDa")
source('~/githubRepos/vrac-R/fractals-ggplot.R')
