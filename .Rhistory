ggplot(data.DE, aes(x= date, y= respiration), color="green")  +geom_line() + geom_line(aes(y=respi.clean.learn))
data.DE$respi.clean.learn <- cleaning.learning.effect(data.DE$respiration,data.DE$date)
lm(data.AB$respiration ~ poly(data.AB$date),2))
lm(data.AB$respiration ~ poly(data.AB$date),2)
lm(data.AB$respiration ~ poly(as.numeric(data.AB$date),2)
lm(data.AB$respiration ~ poly(as.numeric(data.AB$date)),2)
lm(data.AB$respiration ~ poly(as.numeric(data.AB$date)),2)
cleaning.learning.effect <- function(signal, date) {
poly <- lm(signal ~ poly(as.numeric(date),2))
signal - poly
}
data.DE$respi.clean.learn <- cleaning.learning.effect(data.DE$respiration,data.DE$date)
ggplot(data.DE, aes(x= date, y= ), color="green")  +
geom_line() + geom_line(aes(y=respi.clean.learn))
?poly
cleaning.learning.effect <- function(signal, date) {
poly <- lm(signal ~ stats::poly(as.numeric(date),2))
signal - poly
}
data.DE$respi.clean.learn <- cleaning.learning.effect(data.DE$respiration,data.DE$date)
ggplot(data.DE, aes(x= date, y= ), color="green")  +
geom_line() + geom_line(aes(y=respi.clean.learn))
data.DE$respi.clean.learn <- cleaning.learning.effect(data.DE$respiration,data.DE$date)
cleaning.learning.effect <- function(signal, date) {
poly <- lm(signal ~ stats::poly(date,2))
signal - poly
}
data.DE$respi.clean.learn <- cleaning.learning.effect(data.DE$respiration,data.DE$date)
poly()
poly
poly <- lm(signal ~ poly(as.numeric(date),2))
poly <- lm(signal ~ stats::poly(as.numeric(date),2))
poly <- lm(data.AB$respiration ~ stats::poly(as.numeric(data.AB$date),2))
poly
?predict
data.DE$respi.clean.learn <- cleaning.learning.effect(data.DE$respiration,data.DE$date)
ggplot(data.DE, aes(x= date, y= ), color="green")  +
geom_line() + geom_line(aes(y=respi.clean.learn))
data.DE$respi.clean.learn <- cleaning.learning.effect(data.DE$respiration,data.DE$date)
cleaning.learning.effect <- function(signal, date) {
reg.sqr <- lm(signal ~ stats::poly(date,2))
signal - predict(reg.sqr)
}
data.DE$respi.clean.learn <- cleaning.learning.effect(data.DE$respiration,data.DE$date)
ggplot(data.DE, aes(x= date, y= ), color="green")  +
geom_line() + geom_line(aes(y=respi.clean.learn))
data.DE$respi.clean.learn
ggplot(data.DE, aes(x= date, y= ), color="green")  +
geom_line() + geom_line(aes(y=respi.clean.learn))
ggplot(data.DE, aes(x= date, y= respiration), color="green")  +
geom_line() + geom_line(aes(y=respi.clean.learn))
pred <- predict(reg.sqr)
regr.sqr <- lm(data.AB$respiration ~ stats::poly(data.AB$date,2))
pred <- predict(reg.sqr)
regr.sqr <- lm(data.AB$respiration ~ stats::poly(data.AB$date,2))
pred <- predict(regr.sqr)
pred
ggplot( data.AB, aes(date, pred))
ggplot( data.AB, aes(date, pred)) + geom_point()
ggplot( data.AB, aes(date, pred), size =1) + geom_point()
ggplot( data.AB, aes(date, pred), size = .5) + geom_point()
ggplot( data.AB, aes(date, pred), size = .5) + geom_point(size =.5)
ggplot( data.AB, aes(date, pred)) + geom_point(size =.1)
ggplot( data.AB, aes(date, pred)) + geom_line()
ggplot( data.AB, aes(date, pred)) + geom_line() + geom_point(aes(y=respiration))
ggplot( data.AB, aes(date, pred)) + geom_line() + geom_point(aes(y=respiration), size = .3)
ggplot( data.AB, aes(date, pred)) + geom_line() + geom_point(aes(y=respiration), size = .3, col = "green")
regr.assymp <- lm(data.AB$respiration ~ stats::poly(data.AB$date,2))
pred <- predict(regr.assymp)
data.DE$respi.clean.learn <- cleaning.learning.effect(data.DE$respiration,data.DE$date)
ggplot(data.DE, aes(x= date, y= respiration), color="green")  +
geom_line() + geom_line(aes(y=respi.clean.learn))
cleaning.learning.effect <- function(signal, date) {
#reg.sqr <- lm(signal ~ stats::poly(date,2))
fit<-nls(signal ~ SSasympOff(date, A, lrc, c0))
signal - predict(fits)
}
regr.assymp <- lm(data.AB$respiration ~ stats::poly(data.AB$date,2))
pred <- predict(regr.assymp)
data.DE$respi.clean.learn <- cleaning.learning.effect(data.DE$respiration,data.DE$date)
ggplot(data.DE, aes(x= date, y= respiration), color="green")  +
geom_line() + geom_line(aes(y=respi.clean.learn))
cleaning.learning.effect <- function(signal, date) {
#reg.sqr <- lm(signal ~ stats::poly(date,2))
reg <- lm(signal ~ log(date))
#fit<-nls(signal ~ SSasympOff(date, A, lrc, c0))
signal - predict(reg)
}
regr.assymp <- lm(data.AB$respiration ~ stats::poly(data.AB$date,2))
pred <- predict(regr.assymp)
data.DE$respi.clean.learn <- cleaning.learning.effect(data.DE$respiration,data.DE$date)
ggplot(data.DE, aes(x= date, y= respiration), color="green")  +
geom_line() + geom_line(aes(y=respi.clean.learn))
cleaning.learning.effect <- function(signal, date) {
#reg.sqr <- lm(signal ~ stats::poly(date,2))
reg <- lm(signal ~ log(as.numeric(date))
#fit<-nls(signal ~ SSasympOff(date, A, lrc, c0))
signal - predict(reg)
cleaning.learning.effect <- function(signal, date) {
#reg.sqr <- lm(signal ~ stats::poly(date,2))
reg <- lm(signal ~ log(as.numeric(date)))
#fit<-nls(signal ~ SSasympOff(date, A, lrc, c0))
signal - predict(reg)
}
regr.assymp <- lm(data.AB$respiration ~ stats::poly(data.AB$date,2))
pred <- predict(regr.assymp)
data.DE$respi.clean.learn <- cleaning.learning.effect(data.DE$respiration,data.DE$date)
ggplot(data.DE, aes(x= date, y= respiration), color="green")  +
geom_line() + geom_line(aes(y=respi.clean.learn))
ggplot(data.DE, aes(x= date, y= respiration), color="green")  +
geom_line() + geom_line(aes(y=respi.clean.learn))
ggplot(data.DE, aes(x= date, y= respiration), color=green)  +
geom_line() + geom_line(aes(y=respi.clean.learn))
ggplot(data.DE, aes(x= date, y= respiration), color=green)  +
geom_line() + geom_line(aes(y=respi.clean.learn), color="red")
ggplot(data.DE, aes(x= date, y= respiration))  +
geom_line(color="green") + geom_line(aes(y=respi.clean.learn), color="red")
plot(x, log(x), type="l")
plot(x, -log(x), type="l")
plot(x, 1/(x), type="l")
plot(x, 1/2, type="l")
source('~/githubRepos/general-functions/cleaning-functions.R')
data.AB$s.max.min <- max.min.signal(data.AB$respiration, loess.ex$fitted)
source('~/githubRepos/general-functions/cleaning-functions.R')
source('~/githubRepos/general-functions/cleaning-functions.R')
data.AB$s.max.min <- min.max.signal(data.AB$respiration, loess$fitted)
source('~/githubRepos/general-functions/cleaning-functions.R')
source('~/githubRepos/general-functions/cleaning-functions.R')
source('~/githubRepos/general-functions/cleaning-functions.R')
source('~/githubRepos/general-functions/cleaning-functions.R')
source('~/githubRepos/general-functions/cleaning-functions.R')
series <- c(0,1,2,3,4,3,2,1)
series.op <- - series
repet <- 4
my.signal <- rep(c(series, series.op),repet)
#fast loes for testing
my.signal.loess <- rep(rep(0,2*length(series)), repet)
expect_equal(length(my.signal.loess), length(my.signal))
#ggplot(data = data.AB[0:5000,]) + geom_line(aes(x= date, y = respiration), color = "blue") +
source('~/githubRepos/general-functions/cleaning-functions.R')
source('~/githubRepos/general-functions/cleaning-functions.R')
source('~/githubRepos/general-functions/cleaning-functions.R')
source('~/githubRepos/general-functions/cleaning-functions.R')
source('~/githubRepos/general-functions/cleaning-functions.R')
data.AB$loess <- loess(data.AB$respiration ~ as.numeric(data.AB$date), degree=1,span=.1)$fitted
data.AB$s.max.min <- min.max.signal(data.AB$respiration, data.AB$loess)
ggplot(data = data.AB[0:5000,]) + geom_line(aes(x= date, y = respiration), color = "blue") +
geom_smooth(method="loess", formula = y ~ x, se=TRUE, size= 1, span=.2, color = "green")  +
geom_line(aes(x = date, y = loess ), color = "green")  +
geom_line(aes(x = date, y = s.max.min), color = "red")
source('~/githubRepos/general-functions/cleaning-functions.R')
source('~/githubRepos/general-functions/cleaning-functions.R')
plot.evol.par.expe(df.half.1, mesure = "temperature", titre = "température 1ere partie des expé")
library(knitr)
library(plyr)
library(grid)
library(ggplot2)
library(gtable)
library(ggvis)
library(reshape2)
library(grDevices)
library(kohonen)
library(zoo)
library(tidyr)
library(signal)
library(dplyr)
theme_set(theme_bw(24))
source("../general-functions/dplyr-functions.R")
source("../general-functions/ggplot-functions.R")
source("../general-functions/load-functions.R")
source("../general-functions/clean-filters-functions.R")
mac.gd.path <- "/Users/godot/githubRepos/"
hp.gd.path <- "C:/Users/Godefroy/githubRepos/"
if(Sys.info()['nodename']=="THIM")gd.path <- hp.gd.path else
gd.path <- mac.gd.path
data.path <- paste(gd.path,"affectiveComputing/data/",sep = "/")
list.exp <- c("AB", "ST", "DA", "LM", "FS1", "PCo", "PCo2", "PCo3", "CW",
"HL", "CLP", "DE", "AW", "DA2", "DA3", "EZ1", "GC1", "IA")
list.half.1 <- list.exp[1:floor(length(list.exp)/2)]
list.half.2 <- list.exp[(floor(length(list.exp)/2)+1):length(list.exp)]
plot.evol.par.expe(df.half.1, mesure = "temperature", titre = "température 1ere partie des expé")
df.all <- do.call(rbind, list.df)
df.all$nom.experience <- factor(df.all$nom.experience)
df.all <- fun.calc.duree(df.all)
nom.expe <- paste('data',list.exp[2],sep='.')
list.exp.df <- sapply(list.exp,function(exp){paste('data',exp,sep='.')})
df.half.1 <- df.all[df.all$nom.experience %in% list.half.1,]
df.half.2 <- df.all[df.all$nom.experience %in% list.half.2,]
plot.evol.par.expe(df.half.1, mesure = "temperature", titre = "température 1ere partie des expé")
plot.evol.par.expe(df.half.2, mesure = "temperature", titre = "température 2nde moitié des expé")
plot.evol.par.expe(df.half.1, mesure = "temperature", lim.bas=20, lim.haut = 35, titre = "température 1ere partie des expé")
plot.evol.par.expe(df.half.2, mesure = "temperature", lim.bas=20, lim.haut = 35, titre = "température 2nde moitié des expé")
df.DA <- df.all %>% filter(nom.experience == "DA", tps.ecoule < 50)
lapply(list.exp.df,function(exp){chrono.plot(exp,"activite.electrodermale")})
lapply(list.exp.df,function(exp){chrono.plot(exp,"frequence.cardiaque")})
df.DA <- df.all %>% filter(nom.experience == "DA", tps.ecoule < 50)
plot.evol.par.expe(df.DA,titre="expérience DA, valeur à 0", mesure = "temperature")
df.DA <- df.all %>% filter(nom.experience == "DA", tps.ecoule < 50, temperature !=0)
df.DA <- df.all %>% filter(nom.experience == "DA", tps.ecoule < 50, temperature !=0)
df.DA <- df.all %>% filter(nom.experience == "DA", tps.ecoule < 50)
plot.evol.par.expe(df.DA,titre="expérience DA, valeur à 0", mesure = "temperature")
df.DA.clean <- df.all %>% filter(nom.experience == "DA", tps.ecoule < 50, temperature !=0)
plot.evol.par.expe(df.DA,titre="expérience DA, valeur à 0", mesure = "temperature")
plot.evol.par.expe(df.DA,titre="expérience DA, valeur à 0 nettoyée", mesure = "temperature")
df.DA.clean <- df.all %>% filter(nom.experience == "DA", tps.ecoule < 50, temperature !=0)
plot.evol.par.expe(df.DA,titre="expérience DA, valeur à 0 nettoyée", mesure = "temperature")
plot.evol.par.expe(df.DA.clean,titre="expérience DA, valeur à 0 nettoyée", mesure = "temperature")
df.DA.clean <- df.all %>% filter(nom.experience == "DA", tps.ecoule < 50, temperature >10)
plot.evol.par.expe(df.DA.clean,titre="expérience DA, valeur à 0 nettoyée", mesure = "temperature")
df.DA.clean <- df.all %>% filter(nom.experience == "DA", tps.ecoule < 50, temperature >5)
plot.evol.par.expe(df.DA.clean,titre="expérience DA, valeur à 0 nettoyée", mesure = "temperature")
df.DA.clean <- df.all %>% filter(nom.experience == "DA", tps.ecoule < 50, temperature >8)
plot.evol.par.expe(df.DA.clean,titre="expérience DA, valeur à 0 nettoyée", mesure = "temperature")
df.DA.clean <- df.all %>% filter(nom.experience == "DA", tps.ecoule < 50, temperature >6)
plot.evol.par.expe(df.DA.clean,titre="expérience DA, valeur à 0 nettoyée", mesure = "temperature")
df.DA.clean <- df.all %>% filter(nom.experience == "DA", tps.ecoule < 50, temperature >7)
plot.evol.par.expe(df.DA.clean,titre="expérience DA, valeur à 0 nettoyée", mesure = "temperature")
df.DA.clean <- df.all %>% filter(nom.experience == "DA", tps.ecoule < 50, temperature >8)
plot.evol.par.expe(df.DA.clean,titre="expérience DA, valeur à 0 nettoyée", mesure = "temperature")
plot.evol.par.expe(df.DA.clean,titre="expérience DA, valeur inf à 9 nettoyée", mesure = "temperature")
source('~/githubRepos/general-functions/cleaning-functions.R')
source('~/githubRepos/general-functions/cleaning-functions.R')
series <- c (0,1,2,3,4,3,2,1)
series.op <- - series
repet <- 4
my.signal.loess <- rep(rep(0,2*length(series)), repet)
expect_equal(length(my.signal.loess), length(my.signal))
source('~/githubRepos/general-functions/cleaning-functions.R')
source('~/githubRepos/general-functions/cleaning-functions.R')
min_max_signal(my_signal, my_signal_loess)
source('~/githubRepos/general-functions/cleaning-functions.R')
min_max_signal(my_signal, my_signal_loess)
min_max_sig <- min_max_signal(my_signal, my_signal_loess)
min_max_sig - lag(min_max_sig)
min_max_sig[-1L] - lag(min_max_sig)
min_max_sig != lag(min_max_sig)
min_max_sig[-1L] != min_max_sig[-length(x)]
min_max_sig[-1L] != min_max_sig[-length(min_max_sig)]
min_max_sig != lag(min_max_sig)
min_max_sig != lag(min_max_sig, default = FALSE)
min_max_sig != lag(min_max_sig, default = FALSE)
min_max_sig_2_frequence <- function(signal) {
min_max_sig[-1L] != min_max_sig[-length(min_max_sig)]
}
min_max_sig != lag(min_max_sig, default = FALSE)
min_max_sig[-1L] != min_max_sig[-length(min_max_sig)]
min_max_sig != lag(min_max_sig, default = FALSE)
min_max_sig != lag(min_max_sig, default = FALSE)
diffs <-  min_max_sig != lag(min_max_sig, default = FALSE)
c(which(diffs), length(min_max_sig))
diff(c(0, idx))
idx <- c(which(diffs), length(min_max_sig))
diff(c(0, idx))
my_signal
min_max_sig
diff(c(0, idx))
min_max_sig <- min_max_signal(my_signal, my_signal_loess)
diffs <-  min_max_sig != lag(min_max_sig, default = FALSE)
diffs
diff(c(0, idx))
idx
sig_freq <- min_max_sig[idx]
sig_freq
diff(c(0, idx))
source('~/githubRepos/general-functions/cleaning-functions.R')
rep(min_max_sig[idx],nb)
nb <- diff(c(0, idx))
rep(min_max_sig[idx],nb)
min_max_sig[idx]
min_max_sig
rep(idx,nb)
nb
rep(idx,nb)
idx
nb
rep(nb,idx)
nb
rep(nb,nb)
source('~/githubRepos/general-functions/cleaning-functions.R')
min_max_sig_2_frequence(min_max_sig)
data.AB$loess <- loess(data.AB$respiration ~ as.numeric(data.AB$date), degree=1,span=.1)$fitted
data.AB$s_max_min <- min_max_signal(data.AB$respiration, data.AB$loess)
min_max_sig_2_frequence(data.AB$s_max_min)
head(min_max_sig_2_frequence(data.AB$s_max_min))
head(min_max_sig_2_frequence(data.AB$s_max_min), n = 20)
data.AB$s_max_min
head(data.AB$s_max_min,n=20)
head(data.AB$s_max_min,n=24)
head(min_max_sig_2_frequence(data.AB$s_max_min), n = 20)
source('~/githubRepos/general-functions/cleaning-functions.R')
source('~/githubRepos/general-functions/cleaning-functions.R')
source('~/githubRepos/general-functions/cleaning-functions.R')
min_max_sig_2_frequence(min_max_sig)
min_max_sig_2_frequence(data.AB$s_max_min)
lag(min_max_signal, default = FALSE)
lag(min_max_signal, default = FALSE)
source('~/githubRepos/general-functions/cleaning-functions.R')
source('~/githubRepos/general-functions/cleaning-functions.R')
library(knitr)
library(plyr)
library(grid)
library(ggplot2)
library(gtable)
library(ggvis)
library(grDevices)
library(reshape2)
library(kohonen)
library(tidyr)
library(zoo)
library(signal)
library(dplyr)
theme_set(theme_bw(24))
source("../general-functions/dplyr-functions.R")
source("../general-functions/ggplot-functions.R")
source("../general-functions/load-functions.R")
source("../general-functions/clean-filters-functions.R")
mac.gd.path <- "/Users/godot/githubRepos/"
hp.gd.path <- "C:/Users/Godefroy/githubRepos/"
if(Sys.info()['nodename']=="THIM")gd.path <- hp.gd.path else
gd.path <- mac.gd.path
data.path <- paste(gd.path,"affectiveComputing/data/",sep = "/")
#en argument : la liste des noms des fichiers csv à importer
load.data <- function(exp){
filename <- paste(data.path,exp, "_SurEchantillonHF_header.csv", sep="")
# print(filename)
df.name <- paste("data.", exp, sep="")
#permet de lancer la fonction load.file sur la liste passée en arguments
assign(df.name, load.file(filename), envir = .GlobalEnv)
}
list.exp <- c("AB", "ST", "DA", "LM", "FS1", "PCo", "PCo2", "PCo3", "CW",
"HL", "CLP", "DE", "AW", "DA2", "DA3", "EZ1", "GC1", "IA")
list.half.1 <- list.exp[1:floor(length(list.exp)/2)]
list.half.2 <- list.exp[(floor(length(list.exp)/2)+1):length(list.exp)]
#charge les dataset en mémoire
list.df <- lapply(list.exp,load.data)
df.all <- do.call(rbind, list.df)
df.all$nom.experience <- factor(df.all$nom.experience)
df.all <- fun.calc.duree(df.all)
nom.expe <- paste('data',list.exp[2],sep='.')
list.exp.df <- sapply(list.exp,function(exp){paste('data',exp,sep='.')})
data.AB$loess <- loess(data.AB$respiration ~ as.numeric(data.AB$date), degree=1,span=.1)$fitted
data.AB$s_max_min <- min_max_signal(data.AB$respiration, data.AB$loess)
source('~/githubRepos/general-functions/cleaning-functions.R')
data.AB$s_max_min <- min_max_signal(data.AB$respiration, data.AB$loess)
source('~/githubRepos/general-functions/cleaning-functions.R')
data.AB$min_max_sig <- min_max_signal(data.AB$respiration, data.AB$loess)
data.AB <- data.AB[,1:7]
data.AB$loess <- loess(data.AB$respiration ~ as.numeric(data.AB$date), degree=1,span=.1)$fitted
data.AB$min_max_sig <- min_max_signal(data.AB$respiration, data.AB$loess)
min_max_sig2freq(min_max_sig)
min_max_sig2freq(data.AB$s_max_min)
min_max_sig2freq(data.AB$min_max_sig)
head(min_max_sig2freq(data.AB$min_max_sig))
signal
series <- c (0,1,2,3,4,3,2,1)
series[-length(series)]
series[-1]
series[-1L]
series[-2]
lag(series)
lag(series,default = 0)
lag(series, default = series[0])
lag(series, default = series[1])
min_max_sig2freq <- function(min_max_signal) {
diffs <- min_max_signal != lag(min_max_signal, default = min_max_signal[1])
idx <- c(which(diffs), length(min_max_signal))
nb <- diff(c(0, idx))
rep(nb,nb)
}
min_max_sig2freq(min_max_sig)
head(min_max_sig2freq(data.AB$min_max_sig))
min_max_sig
source('~/githubRepos/general-functions/cleaning-functions.R')
data.AB$freq_sig <- min_max_sig2freq(data.AB$min_max_sig)
View(data.AB)
source('~/githubRepos/general-functions/cleaning-functions.R')
ggplot(data.AB, aes(date, respiration)) + geom_line(col="red")
ggplot(data.AB, aes(date, respiration)) + geom_line(col="red") + geom_line(aes(y= min_max_sig), col="blue")
ggplot(data.AB[1:1000,], aes(date, respiration)) + geom_line(col="red") + geom_line(aes(y= min_max_sig), col="blue")
ggplot(data.AB[1:1000,], aes(date, respiration)) + geom_line(col="red") +
geom_line(aes(y= min_max_sig), col="blue") +
geom_text(aes(label= freq_sig))
source('~/githubRepos/general-functions/cleaning-functions.R')
data.AB$freq_sig <- min_max_sig2freq(data.AB$min_max_sig)
ggplot(data.AB[1:1000,], aes(date, respiration)) + geom_line(col="red") +
geom_line(aes(y= min_max_sig), col="blue") +
geom_text(aes(y = min_max_sig, label= freq_sig))
ggplot(data.AB[1:100,], aes(date, respiration)) + geom_line(col="red") +
geom_line(aes(y= min_max_sig), col="blue") +
geom_text(aes(y = min_max_sig, label= freq_sig))
data.AB$freq_sig <- min_max_sig2freq(data.AB$min_max_sig)
ggplot(data.AB[1:100,], aes(date, respiration)) + geom_line(col="red") +
geom_line(aes(y= min_max_sig), col="blue") +
geom_text(aes(y = min_max_sig, size = 2, label= freq_sig))
ggplot(data.AB[1:100,], aes(date, respiration)) + geom_line(col="red") +
geom_line(aes(y= min_max_sig), col="blue") +
geom_text(aes(y = min_max_sig, check_overlap = TRUE, label= freq_sig))
ggplot(data.AB[1:100,], aes(date, respiration)) + geom_line(col="red") +
geom_line(aes(y= min_max_sig), col="blue") +
geom_text(aes(y = min_max_sig, label= freq_sig), check_overlap = TRUE)
source('~/githubRepos/general-functions/cleaning-functions.R')
min_max_sig2freq <- function(min_max_signal) {
diffs <- min_max_signal != lag(min_max_signal, default = min_max_signal[1])
idx <- c(which(diffs), length(min_max_signal))
nb <- diff(c(0, idx-1))
rep(nb,nb)
}
data.AB$freq_sig <- min_max_sig2freq(data.AB$min_max_sig)
nb
diffs <- min_max_signal != lag(min_max_signal, default = min_max_signal[1])
idx <- c(which(diffs), length(min_max_signal))
nb <- diff(c(0, idx))
rep(nb,nb)
nb
diff(c(0, idx))
idx
?diff
idx
diff(c(0, idx))
min_max_sig2freq <- function(min_max_signal) {
diffs <- min_max_signal != lag(min_max_signal, default = min_max_signal[1])
idx <- c(which(diffs), length(min_max_signal))
nb <- diff(c(idx,0))
rep(nb,nb)
}
#min_max_sig2freq(min_max_sig)
#head(min_max_sig2freq(data.AB$min_max_sig))
data.AB$freq_sig <- min_max_sig2freq(data.AB$min_max_sig)
ggplot(data.AB[1:100,], aes(date, respiration)) + geom_line(col="red") +
geom_line(aes(y= min_max_sig), col="blue") +
geom_text(aes(y = min_max_sig, label= freq_sig), check_overlap = TRUE)
min_max_sig2freq <- function(min_max_signal) {
diffs <- min_max_signal != lag(min_max_signal, default = min_max_signal[1])
idx <- c(which(diffs), length(min_max_signal))
nb <- diff(c(idx,0))
rep(nb,nb)
}
#min_max_sig2freq(min_max_sig)
#head(min_max_sig2freq(data.AB$min_max_sig))
data.AB$freq_sig <- min_max_sig2freq(data.AB$min_max_sig)
nb
min_max_sig2freq <- function(min_max_signal) {
diffs <- min_max_signal != lag(min_max_signal, default = min_max_signal[1])
idx <- c(which(diffs), length(min_max_signal))
nb <- diff(c(0, idx))
rep(nb,nb)
}
#min_max_sig2freq(min_max_sig)
#head(min_max_sig2freq(data.AB$min_max_sig))
data.AB$freq_sig <- min_max_sig2freq(data.AB$min_max_sig)
idx
idx <- idx[-length(idx)]
idx
diffs
lag(c(1,1,2))
lag(c(1,1,2,3 ,4))
lag(c(1,1,2,3 ,4),n=2)
lag(c(1,1,2,3 ,4),n=4)
?c
idx
c(1,1,1,-2-,2,3,3,3,3,)
min_max_signal <- c(1,1,1,-2,-2,3,3,3,3,)
min_max_signal <- c(1,1,1,-2,-2,3,3,3,3,3)
diffs <- min_max_signal != lag(min_max_signal, default = min_max_signal[1])
diffs
idx <- c(which(diffs), length(min_max_signal))
idx
idx <- c(which(diffs))
idx
idx <- c(which(diffs), length(min_max_signal))
nb <- diff(c(0, idx))
nb
idx
nb
nb <- diff(c(1, idx))
nb
min_max_signal
idx <- c(which(diffs), length(min_max_signal)+1)
nb <- diff(c(1, idx))
rep(nb,nb)
data.AB$freq_sig <- min_max_sig2freq(data.AB$min_max_sig)
ggplot(data.AB[1:100,], aes(date, respiration)) + geom_line(col="red") +
geom_line(aes(y= min_max_sig), col="blue") +
geom_text(aes(y = min_max_sig, label= freq_sig), check_overlap = TRUE)
data.AB$freq_sig <- min_max_sig2freq(data.AB$min_max_sig)
ggplot(data.AB[1:100,], aes(date, respiration)) + geom_line(col="red") +
geom_line(aes(y= min_max_sig), col="blue") +
geom_text(aes(y = min_max_sig, label= freq_sig), check_overlap = TRUE)
data.AB$freq_sig <- min_max_sig2freq(data.AB$min_max_sig)
data.AB$freq_sig <- null
data.AB$freq_sig <- NULL
data.AB$freq_sig <- min_max_sig2freq(data.AB$min_max_sig)
ggplot(data.AB[1:100,], aes(date, respiration)) + geom_line(col="red") +
geom_line(aes(y= min_max_sig), col="blue") +
geom_text(aes(y = min_max_sig, label= freq_sig), check_overlap = TRUE)
source('~/githubRepos/general-functions/cleaning-functions.R')
min_max_sig2freq <- function(min_max_signal) {
diffs <- min_max_signal != lag(min_max_signal, default = min_max_signal[1])
idx <- c(which(diffs), length(min_max_signal)+1)
nb <- diff(c(1, idx))
rep(nb,nb)
}
#min_max_sig2freq(min_max_sig)
#head(min_max_sig2freq(data.AB$min_max_sig))
data.AB$freq_sig <- NULL
data.AB$freq_sig <- min_max_sig2freq(data.AB$min_max_sig)
ggplot(data.AB[1:100,], aes(date, respiration)) + geom_line(col="red") +
geom_line(aes(y= min_max_sig), col="blue") +
geom_text(aes(y = min_max_sig, label= freq_sig), check_overlap = TRUE)
source('~/githubRepos/general-functions/cleaning-functions.R')
source('~/githubRepos/general-functions/cleaning-functions.R')
source('~/githubRepos/general-functions/cleaning-functions.R')
