ggplot(df_pca_dist, aes(log(dist))) + geom_histogram()
#the histogram shows a 2nd (small) distribution around log(dist) = 2.1 i.e. dist ~= 8, we want to cut it
df_pca_filt <- df_pca_dist %>% filter(dist < 6)
ggplot(df_pca_filt, aes(dist)) + geom_histogram()
}else {
#filter too extreme data
df_pca_filt <- df_pca_dist %>% filter(dist < 6)
#update nom.experience and state
rows2keep <- which(df_pca_dist$dist < 6)
df_pca_filt$nom.experience <- df_in_pca$nom.experience[rows2keep]
df_pca_filt$state <- df_in_pca$state[rows2keep]
df_pca_filt$tps_ecoule <- df_in_pca$tps_ecoule[rows2keep]
df_pca_filt <- df_pca_filt %>% select(-dist)
}
nb_neurons_per_dim <- sqrt(400)
grid_x <- round(share_eigenv1/share_eigenv2 * nb_neurons_per_dim)
grid_y <- round(share_eigenv2/share_eigenv1 * nb_neurons_per_dim)
library(yasomi)
opar <- par(ask = dev.interactive(orNone = TRUE))
data_pca <- scale(df_pca_filt %>% select(-nom.experience, -state, -tps_ecoule))
# building the grid
sg_one <- somgrid(xdim=15,ydim=15,topo="hex")
sg_pca <- somgrid(xdim=grid_x,ydim=grid_x,topo="hex")
# training the SOM
#somT <- som.t
yasom_pca_filt <- som.tune(data_pca,sg_pca,som.tunecontrol(sg_pca,radii=c(2,sg$diam),nradii=10,criterion=error.kaskilagus),verbose=T)
yasom_pca_filt <- som.tune(data_pca,sg_pca,som.tunecontrol(sg_pca,radii=c(2,sg$diam),nradii=10,criterion=error.kaskilagus),verbose=T)
yasom_pca_filt <- som.tune(data_pca,sg_pca,som.tunecontrol(sg_pca,radii=c(2,sg_pca$diam),nradii=10,criterion=error.kaskilagus),verbose=T)
sg_pca <- somgrid(xdim=grid_x,ydim=grid_x,topo="hex")
nb_neurons_per_dim <- sqrt(400)
grid_x <- round(share_eigenv1/share_eigenv2 * nb_neurons_per_dim)
grid_y <- round(share_eigenv2/share_eigenv1 * nb_neurons_per_dim)
sg_pca <- somgrid(xdim=grid_x,ydim=grid_x,topo="hex")
source(file = "~/githubRepos/RGeneralFunctions/ggplot_et_co/ggpca/PCA.R")
df4pca <- df_stat %>% ungroup %>% dplyr::select(-loess)
if(PCA_REPLACE_NA){
#replace NA by a stat calculated on the column of NA
#inspired by https://stat.ethz.ch/pipermail/r-help/2007-November/146598.html
# na2stat <- function (df, fun) {
#   #replace missing values :
#   replace_na <- function(vec, fun) {
#     m <- fun(vec, na.rm = TRUE)
#     vec[is.na(vec)] <- m
#     return(vec)
#   }
#   map_df(df,replace_na, fun)
# }
na2stat_ho <- function(fun) {
function(vec) {
m <- fun(vec, na.rm = TRUE)
vec[is.na(vec)] <- m
return(vec)
}
}
#df_pca_no_na <- df_pca %>% select(-c(nom.experience, state)) %>% na2stat(fun = mean)
df4pca_no_na <- df4pca %>% mutate_if(is.numeric, na2stat_ho(fun = mean))
if(DEBUG){
print("dim of df pca no-na :");print(dim(df4pca_no_na))
}
} else {
df4pca_no_na <- df4pca %>% na.omit
if(DEBUG) print(dim(df4pca_no_na))
}
filt <- function(vec) {
is.factor(vec) | (class(vec) == "difftime")
}
pca_no_na <- prcomp( ~ ., data = select_if(df4pca_no_na,not(filt)),
center = T, scale = T, na.action = "na.pass")
df_in_pca <- as_data_frame(pca_no_na$x)
pca_no_na <- prcomp( ~ ., data = select_if(df4pca_no_na,not(filt)),
center = T, scale = T, na.action = "na.pass")
# !diagnostics off
###########################################################
######################## CAP & SOM MAP ###################
###########################################################
# to customize the color scheme, one can use the scale_fill_gradientn() function
# in combination with brewer.pal() from the RColorBrewer package.
# (RColorBrewer provides some nice color schemes that would be time-consuming to  reproduce manually.
# You will use mostly red colors here, but you can type display.brewer.all() in the R console to see the available color palattes.)
library(devtools)
library(knitr)
#stat
library(kohonen)
library(signal)
#Whickham
library(stringr)
library(purrr)
library(tidyr)
library(dplyr)
library(tibble)
library(tibble)
suppressPackageStartupMessages(library(dplyr))
library(lubridate)
library(testthat)
library(assertthat)
#GGplot & data viz
library(ggplot2)
#library(ggbiplot)
library(ggradar)
library(ggbagplot)
library(grid)
#other struc
library(data.table)
library(gtable)
#?
library(grDevices)
library(reshape2)
library(scales)
library(readr)
library(stringr)
#instal ggradar : devtools::install_github("ricardo-bion/ggradar", dependencies=TRUE)
# configured to work on a Mac, change directory to Unix or Windows
#download.file("https://dl.dropboxusercontent.com/u/2364714/airbnb_ttf_fonts/Circular Air-Light 3.46.45 PM.ttf", "/Library/Fonts/Circular Air-Light 3.46.45 PM.ttf", method="curl")
#extrafont::font_import(pattern = 'Circular', prompt=FALSE)
theme_set(theme_bw(24))
####################################################################################
################################# MACRO & HYPER-PARAMETRES##########################
####################################################################################
if (!exists("DEBUG")) DEBUG <- FALSE
if (!exists("PRINT")) PRINT <- FALSE
LARGE_SET_EXPE <- TRUE
LARGE_SET_VAR <- TRUE
PCA_REPLACE_NA <- FALSE
############################################################
#######################LOAD & PREP #########################
############################################################
#general helpers
source("../RGeneralFunctions/dplyr-functions.R")
source("../RGeneralFunctions/load-functions.R")
source("../RGeneralFunctions/cleaning-functions.R")
source("../RGeneralFunctions/ggplot-functions.R")
source("../RGeneralFunctions/clean-filters-functions.R")
source("../RGeneralFunctions/toolbox_functions.R")
#affect comput related
source("./functions/load_df-all.R")
source(file = "./functions/kohonen_graph.R") #for plot_ho
df_all <- import_df_all()
source('~/githubRepos/affectiveComputing/functions/som_prep.R', echo=TRUE)
source('~/githubRepos/affectiveComputing/functions/som_prep.R', echo=TRUE)
library(yasomi)
opar <- par(ask = dev.interactive(orNone = TRUE))
data_pca <- scale(df_pca_filt %>% select(-nom.experience, -state, -tps_ecoule))
sg_one <- somgrid(xdim=15,ydim=15,topo="hex")
sg_pca <- somgrid(xdim=grid_x,ydim=grid_x,topo="hex")
yasom_pca_filt <- som.tune(data_pca,sg_pca,som.tunecontrol(sg_pca,radii=c(2,sg_pca$diam),nradii=10,criterion=error.kaskilagus),verbose=T)
df_pca_filt$nom.experience <- df_in_pca$nom.experience[rows2keep]
df_pca_filt$state <- df_in_pca$state[rows2keep]
df_pca_filt$tps_ecoule <- df_in_pca$tps_ecoule[rows2keep]
df_pca_filt <- df_pca_filt %>% select(-dist)
rows2keep <- which(df_pca_dist$dist < 6)
df_pca_filt$nom.experience <- df_in_pca$nom.experience[rows2keep]
df_pca_filt$state <- df_in_pca$state[rows2keep]
df_pca_filt$tps_ecoule <- df_in_pca$tps_ecoule[rows2keep]
df_pca_filt <- df_pca_filt %>% select(-dist)
data_pca <- scale(df_pca_filt %>% select(-nom.experience, -state, -tps_ecoule))
sg_one <- somgrid(xdim=15,ydim=15,topo="hex")
sg_pca <- somgrid(xdim=grid_x,ydim=grid_x,topo="hex")
yasom_pca_filt <- som.tune(data_pca,sg_pca,som.tunecontrol(sg_pca,radii=c(2,sg_pca$diam),nradii=10,criterion=error.kaskilagus),verbose=T)
batch_pca <- batchsom(data_pca, sg_one)
plot(som,type="stars",with.grid=TRUE,grid.border="red")
plot(som)
plot(yasom_pca_filt)
som <- yasom_pca_filt$best.som
plot(som)
plot(som,mapToUnit(som, as.factor(df_pca_filt$state)), mode = "data", type = "barplot")
spar <- par(mfrow=c(3,3))
for(i in 1:9) {
componentPlane(som,i)
}
?plot.som
plot(som,mapToUnit(som, as.factor(df_pca_filt$state)), mode = "data", type = "start")
plot(som,mapToUnit(som, as.factor(df_pca_filt$state)), mode = "data", type = "stars")
df_ref <- df_pca_filt %>% select(-classif, nom.experience)
df_ref$nom_experience <- df_pca_filt$nom.experience
df_ref$id_neurone <- df_pca_filt$classif
df_ref <- df_pca_filt %>% select(-classif, nom.experience)
df_ref <- df_pca_filt %>% select(nom.experience)
df_ref$nom_experience <- df_pca_filt$nom.experience
df_ref$id_neurone <- df_pca_filt$classif
df_pca_filt$classif <- som$classif
plot(som)
code <- colorCode(data_pca,50)
plot(som,type="stars",with.grid=TRUE,grid.border="red")
plot(som,mapToUnit(som, as.factor(df_pca_filt$state)), mode = "data", type = "parallel")
df_ref <- df_pca_filt %>% select(nom.experience)
df_ref$nom_experience <- df_pca_filt$nom.experience
df_ref$id_neurone <- df_pca_filt$classif
df_count_neuro_expe <- df_ref %>% select(id_neurone, nom_experience) %>%
group_by(id_neurone, nom_experience) %>% summarise(count = n())
expe_par_neurone <- df_count_neuro_expe %>% spread(nom_experience, count, fill = 0)
nb_group <- grid_x * grid_y
nb_expe <- length(unique(df_pca_filt$nom.experience))
base_rep <- 1:nb_group
rep <- rep("", nb_expe - 1)
lab_rep <- purrr::map(base_rep, function(ele) { c(ele, rep)}) %>% unlist()
expe_par_neurone <- expe_par_neurone %>% head(nb_group)
gathered_expe_par_n <- expe_par_neurone %>% gather(variable, value, -id_neurone) %>%
group_by(id_neurone) %>% mutate(cumsum = cumsum(value))
gathered_expe_par_n %>% filter(id_neurone == 15)
expe_neuro_theme <-  theme(panel.margin.x = unit(0, "lines"), panel.margin.y = unit(0, "lines"), panel.border = element_rect(colour = rgb(1.0, 0, 0, 0.5), fill=NA, size=1),
axis.text.x=element_text(size = 6),
axis.title.y=element_blank(), axis.text.y=element_text(size = 8), axis.ticks.y=element_blank(),
strip.background = element_blank(), strip.text.x = element_blank(),
legend.title = element_text(colour="black", size = 5,  face="bold"),
legend.text = element_text(colour="black", size = 5),
legend.key = element_rect(size = 1),
title = element_text(color = "blue", size = 6, face = "bold"))
expe_neuro_theme2 <- theme(axis.text.y = element_text(size = 3, margin = margin(0, 0, 0, 0)))
ggplot(gathered_expe_par_n, aes(x = as.factor(id_neurone), y = value, fill = factor(variable))) %+%
geom_bar(stat = "identity") %+%
#geom_text(aes(x = group + .2, y = cumsum - 15, label = value), size = 3, colour = "black", check_overlap = TRUE) %+%
geom_text(aes(x = id_neurone - 0, y = (cumsum + cumsum - value)/2, label = ifelse(value != 0, as.character(variable), "")), size = 3, colour = "black", check_overlap = FALSE) %+%
expe_neuro_theme %+%
ggtitle("expériences captées")
ggplot(gathered_expe_par_n, aes(x = id_neurone, y = value, fill = factor(variable))) %+%
geom_bar(stat = "identity", position = "fill") %+%
#geom_text(aes(y = cumsum - 15, label = value), colour = "black") %+%
expe_neuro_theme %+%
ggtitle("expériences captées")
ggplot(gathered_expe_par_n, aes(x = variable, y = value, fill = variable)) %+%
facet_wrap( ~ id_neurone, ncol = 15, scales = "free")  %+%
geom_bar(stat="identity") %+%
#geom_text(aes(x = 2.5, y = 1, label = lab_rep), colour="black", size = 2, inherit.aes=F) %+%
expe_neuro_theme %+%
ggtitle("expériences captées")
ls
df_sec <- df_pca_filt
df_sec$one_sec_elapsed <- df_pca_filt$tps_ecoule %>% round(digits = 0) %>% factor()
df_sec$five_sec_elapsed <- df_pca_filt$tps_ecoule %>% `/`(5)  %>% round(digits = 0) %>% factor()
df_sec$id_neurone <- som$classif
df_neuro_sec <- df_sec %>% select(id_neurone, one_sec_elapsed, nom.experience)
df_neuro_5sec <- df_sec %>% select(id_neurone, five_sec_elapsed, nom.experience)
df_count_neuro_1sec <- df_neuro_sec %>%
group_by(id_neurone, one_sec_elapsed, nom.experience) %>% summarise(count = n())
df_count_neuro_5sec <- df_neuro_5sec %>%
group_by(id_neurone, five_sec_elapsed, nom.experience) %>% summarise(count = n())
expe_par_sec <- df_count_neuro_1sec %>% spread(nom.experience, count, fill = 0)
expe_par_5sec <- df_count_neuro_5sec %>% spread(nom.experience, count, fill = 0)
dt_neur_coord <- data.table(id_neurones = 1:416, x = som$somgrid$pts[,1], y = som$somgrid$pts[,2])
chg_neur <- df_sec$id_neurone != lag(df_sec$id_neurone) | df_sec$nom.experience != lag(df_sec$nom.experience)
dt_neur_coord <- data.table(id_neurones = 1:2704, x = som$somgrid$pts[,1], y = som$somgrid$pts[,2])
chg_neur <- df_sec$id_neurone != lag(df_sec$id_neurone) | df_sec$nom.experience != lag(df_sec$nom.experience)
chg_neur[1] <- T
path_neur <- df_sec$id_neurone[chg_neur]
nom_expe <- df_sec$nom.experience[chg_neur]
no_chg <- as.numeric(!chg_neur)
nb_data <- no_chg %>% purrr::reduce( function(prev, cur) { if(cur == 1) {prev[length(prev)] <- prev[length(prev)] + 1 ; prev } else{ prev[length(prev)+1] <- 1; prev }}, 1)
nb_data <- no_chg %>% purrr::reduce( function(prev, cur) { if(cur == 1) {prev[length(prev)] <- prev[length(prev)] + 1 ; prev } else{ prev[length(prev)+1] <- 1; prev }}, 1)
nb_data <- no_chg %>% purrr::reduce(
function(prev, cur) {
if(cur == 1) {prev[length(prev)] <- prev[length(prev)] + 1 ; prev }
else{ prev[length(prev)+1] <- 1; prev }
}, 1)
?reduce
nb_data <- no_chg %>% purrr::reduce(
function(prev, cur) {
if(cur == 1) {prev[length(prev)] <- prev[length(prev)] + 1 ; prev }
else{ prev[length(prev)+1] <- 1; prev }
}, .init = 1)
dt_path_neur <- data.table(path_neur, nom_expe, nb_data)
dt_path_neur <- bind_cols(dt_path_neur,as.data.frame(dt_neur_coord[dt_path_neur$path_neur,.(x,y)]))
new_expe <- dt_path_neur$nom_expe != lag(dt_path_neur$nom_expe)
dt_path_neur$xend <- lag(dt_path_neur$x, default = dt_path_neur$x[1])
dt_path_neur$yend <- lag(dt_path_neur$y, default = dt_path_neur$y[1])
ggplot(dt_neur_coord, aes(x = x, y = y)) + geom_point( col = "blue", shape = 21)
ggplot(dt_path_neur, aes(x = x, y = y)) %+% geom_point(aes(col = nom_expe, size = nb_data), alpha = 0.5)
ggplot(dt_path_neur, aes(x = x, y = y)) %+% geom_point(aes(col = nom_expe, size = nb_data), alpha = 0.5)
ggplot(dt_path_neur, aes(x = x, y = y)) %+% geom_jitter(aes(col = nom_expe), width = 0.5, height = 0.5, alpha = 0.5)
ggplot(test_AB, aes(x = x, y = y)) %+%
geom_point(col = "darkgrey")  %+%
geom_segment(aes(xend = xend, yend = yend, col = elapsed_time), alpha = .5, arrow = arrow(length = unit(0.02, "npc"))) %+%
scale_color_gradient2(mid = "blue", high = "red")
test_AB <- dt_path_neur %>% filter(nom_expe == "AB") %>% dplyr::mutate(elapsed_time = cumsum(nb_data)) %>% data.table
ggplot(test_AB, aes(x = x, y = y)) %+%
geom_point(col = "darkgrey")  %+%
geom_segment(aes(xend = xend, yend = yend, col = elapsed_time), alpha = .5, arrow = arrow(length = unit(0.02, "npc"))) %+%
scale_color_gradient2(mid = "blue", high = "red")
ggplot(test_AB, aes(x = x, y = y)) %+%
geom_point(col = "darkgrey")  %+%
geom_segment(aes(xend = xend, yend = yend, col = elapsed_time), alpha = .5, arrow = arrow(length = unit(0.02, "npc"))) %+%
scale_color_gradient2(mid = "blue", high = "red")
dt_path_neur <- dt_path_neur %>% group_by(nom_expe) %>% mutate(elapsed_time = cumsum(nb_data)) %>% data.table()
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(dt_path_neur, aes(x = x, y = y)) %+%
ggplot2::facet_wrap(facets =  ~ nom_expe) %+%
scale_color_manual(values = cbPalette) %+%
geom_point(aes(col = nom_expe))
graph_path_neurons <- function(df) {
#colors & theme
cbPalette2 <- c("#F00000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
simple_theme <- theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
gg <-  ggplot(df, aes(x = x, y = y)) %+%
facet_wrap(facets =  ~ nom_expe) %+%
geom_segment(aes(xend = xend, yend = yend, col = elapsed_time), alpha = .5, arrow = arrow(length = unit(0.05, "npc"))) %+%
scale_color_gradient2(mid = "grey87", high = "grey27") %+%
geom_point(aes(fill = nom_expe, size = nb_data), shape = 21) %+%
scale_fill_manual(values = cbPalette2) %+%
simple_theme %+%
ggtitle("déplacement des données entre les référents")
print(gg)
}
dt_path_short <- dt_path_neur %>% filter(elapsed_time < 10000)
graph_path_neurons(dt_path_short)
dt_path_short2 <- dt_path_neur %>% filter(elapsed_time >= 10000 & elapsed_time < 20000)
graph_path_neurons(dt_path_short2)
dt_path_short3 <- dt_path_neur %>% filter(elapsed_time >= 20000 & elapsed_time < 30000)
graph_path_neurons(dt_path_short3)
dt_path_short4 <- dt_path_neur %>% filter(elapsed_time >= 30000 & elapsed_time < 40000)
graph_path_neurons(dt_path_short4)
test_AB <- dt_path_neur %>% filter(nom_expe == "AB") %>% dplyr::mutate(elapsed_time = cumsum(nb_data)) %>% data.table
ggplot(test_AB, aes(x = x, y = y)) %+%
geom_point(col = "darkgrey")  %+%
geom_segment(aes(xend = xend, yend = yend, col = elapsed_time), alpha = .5, arrow = arrow(length = unit(0.02, "npc"))) %+%
scale_color_gradient2(mid = "blue", high = "red")
dt_path_neur <- dt_path_neur %>% group_by(nom_expe) %>% mutate(elapsed_time = cumsum(nb_data)) %>% data.table()
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(dt_path_neur, aes(x = x, y = y)) %+%
ggplot2::facet_wrap(facets =  ~ nom_expe) %+%
scale_color_manual(values = cbPalette) %+%
geom_point(aes(col = nom_expe))
test_AB$x
test_AB$y
test_AW <- dt_path_neur %>% filter(nom_expe == "AW") %>% dplyr::mutate(elapsed_time = cumsum(nb_data)) %>% data.table
ggplot(test_AW, aes(x = x, y = y)) %+%
geom_point(col = "darkgrey")  %+%
geom_segment(aes(xend = xend, yend = yend, col = elapsed_time), alpha = .5, arrow = arrow(length = unit(0.02, "npc"))) %+%
scale_color_gradient2(mid = "blue", high = "red")
df_neuro_sec <- df_sec %>% select(id_neurone, one_sec_elapsed, nom.experience, state)
df_neuro_5sec <- df_sec %>% select(id_neurone, five_sec_elapsed, nom.experience, state)
df_count_neuro_1sec <- df_neuro_sec %>%
group_by(id_neurone, one_sec_elapsed, nom.experience) %>% summarise(count = n())
df_count_neuro_5sec <- df_neuro_5sec %>%
group_by(id_neurone, five_sec_elapsed, nom.experience) %>% summarise(count = n())
expe_par_sec <- df_count_neuro_1sec %>% spread(nom.experience, count, fill = 0)
expe_par_5sec <- df_count_neuro_5sec %>% spread(nom.experience, count, fill = 0)
dt_neur_coord <- data.table(id_neurones = 1:900, x = som$grid$pts[,1], y = som$grid$pts[,2])
chg_neur <- df_sec$id_neurone != lag(df_sec$id_neurone) | df_sec$nom.experience != lag(df_sec$nom.experience)
chg_neur[1] <- T
path_neur <- df_sec$id_neurone[chg_neur]
nom_expe <- df_sec$nom.experience[chg_neur]
no_chg <- as.numeric(!chg_neur)
nb_data <- no_chg %>% purrr::reduce( function(prev, cur) { if(cur == 1) {prev[length(prev)] <- prev[length(prev)] + 1 ; prev } else{ prev[length(prev)+1] <- 1; prev }}, 1)
function (.)
Q
?reduce
nb_data <- no_chg %>% purrr::reduce( function(prev, cur) { if(cur == 1) {prev[length(prev)] <- prev[length(prev)] + 1 ; prev } else{ prev[length(prev)+1] <- 1; prev }}, .init = 1)
plot(batch_pca)
plot(som,mapToUnit(batch_pca, as.factor(df_pca_filt$state)), mode = "data", type = "parallel")
plot(som,mapToUnit(batch_pca$somgrid, as.factor(df_pca_filt$state)), mode = "data", type = "parallel")
plot(som,mapToUnit(batch_pca$, as.factor(df_pca_filt$state)), mode = "data", type = "parallel")
plot(som,mapToUnit(batch_pca, as.factor(df_pca_filt$state)), mode = "data", type = "parallel")
plot(batch_pca,mapToUnit(batch_pca, as.factor(df_pca_filt$state)), mode = "data", type = "parallel")
df_ref_state <- df_pca_filt %>% select(state)
df_ref$state <- df_pca_filt$state
df_count_state <- df_ref %>% select(state, nom_experience) %>%
group_by(state, nom_experience) %>% summarise(count = n())
state_par_neurone <- df_count_state %>% spread(nom_experience, count, fill = 0)
nb_group <- grid_x * grid_y
nb_expe <- length(unique(df_pca_filt$nom.experience))
nb_expe
nb_state <- length(unique(df_pca_filt$state))
nb_state
base_rep <- 1:nb_group
rep <- rep("", nb_expe - 1)
stat_par_neurone <- stat_par_neurone %>% head(nb_group)
state_par_neurone <- state_par_neurone %>% head(nb_group)
gathered_state_par_n <- state_par_neurone %>% gather(variable, value, -state) %>%
group_by(state) %>% mutate(cumsum = cumsum(value))
gathered_state_par_n %>% filter(id_neurone == 15)
gathered_state_par_n %>% filter(state == 15)
gathered_state_par_n %>% filter(state == 5)
gathered_state_par_n %>% filter(state == 1)
gathered_state_par_n %>% filter(state == 13)
gathered_state_par_n
gathered_state_par_n %>% filter(state == "etat1")
expe_neuro_theme <-  theme(panel.margin.x = unit(0, "lines"), panel.margin.y = unit(0, "lines"), panel.border = element_rect(colour = rgb(1.0, 0, 0, 0.5), fill=NA, size=1),
axis.text.x=element_text(size = 6),
axis.title.y=element_blank(), axis.text.y=element_text(size = 8), axis.ticks.y=element_blank(),
strip.background = element_blank(), strip.text.x = element_blank(),
legend.title = element_text(colour="black", size = 5,  face="bold"),
legend.text = element_text(colour="black", size = 5),
legend.key = element_rect(size = 1),
title = element_text(color = "blue", size = 6, face = "bold"))
expe_neuro_theme2 <- theme(axis.text.y = element_text(size = 3, margin = margin(0, 0, 0, 0)))
ggplot(gathered_state_par_n, aes(x = as.factor(state), y = value, fill = factor(variable))) %+%
geom_bar(stat = "identity") %+%
#geom_text(aes(x = group + .2, y = cumsum - 15, label = value), size = 3, colour = "black", check_overlap = TRUE) %+%
geom_text(aes(x = state - 0, y = (cumsum + cumsum - value)/2, label = ifelse(value != 0, as.character(variable), "")), size = 3, colour = "black", check_overlap = FALSE) %+%
expe_neuro_theme %+%
ggtitle("états captés")
ggplot(gathered_state_par_n, aes(x = as.factor(state), y = value, fill = factor(variable))) %+%
geom_bar(stat = "identity") %+%
#geom_text(aes(x = group + .2, y = cumsum - 15, label = value), size = 3, colour = "black", check_overlap = TRUE) %+%
geom_text(aes(x = as.numeric(state) - 0, y = (cumsum + cumsum - value)/2, label = ifelse(value != 0, as.character(variable), "")), size = 3, colour = "black", check_overlap = FALSE) %+%
expe_neuro_theme %+%
ggtitle("états captés")
gathered_expe_par_n %>% filter(state == 1)
gathered_expe_par_n %>% filter(nom.experience == 1)
gathered_expe_par_
gathered_expe_par_n
gathered_expe_par_n %>% filter(id.neurone == 1)
gathered_expe_par_n %>% filter(id_neurone == 1)
gathered_state_par_n %>% filter(id_neurone == 1)
gathered_state_par_n <- state_par_neurone %>% gather(variable, value, -id_neurone) %>%
group_by(id_neurone) %>% mutate(cumsum = cumsum(value))
df_count_state <- df_ref %>% select(id_neurone, state) %>%
group_by(state, nom_experience) %>% summarise(count = n())
expe_par_neurone <- df_count_neuro_expe %>% spread(nom_experience, count, fill = 0)
state_par_neurone <- df_count_state %>% spread(nom_experience, count, fill = 0)
nb_group <- grid_x * grid_y
nb_state <- length(unique(df_pca_filt$state))
base_rep <- 1:nb_group
rep <- rep("", nb_expe - 1)
lab_rep <- purrr::map(base_rep, function(ele) { c(ele, rep)}) %>% unlist()
expe_par_neurone <- expe_par_neurone %>% head(nb_group)
state_par_neurone <- state_par_neurone %>% head(nb_group)
gathered_expe_par_n <- expe_par_neurone %>% gather(variable, value, -id_neurone) %>%
group_by(id_neurone) %>% mutate(cumsum = cumsum(value))
gathered_state_par_n <- state_par_neurone %>% gather(variable, value, -id_neurone) %>%
group_by(id_neurone) %>% mutate(cumsum = cumsum(value))
gathered_state_par_n <- state_par_neurone %>% gather(variable, value, -id_neurone) %>%
group_by(id_neurone) %>% mutate(cumsum = cumsum(value))
gathered_state_par_n <- state_par_neurone %>% gather(variable, value, -id_neurone) %>%
group_by(id_neurone) %>% mutate(cumsum = cumsum(value))
state_par_neurone
expe_par_neurone
state_par_neurone
df_count_state <- df_ref %>% select(id_neurone, state) %>%
group_by(id_neurone, state) %>% summarise(count = n())
expe_par_neurone <- df_count_neuro_expe %>% spread(nom_experience, count, fill = 0)
state_par_neurone <- df_count_state %>% spread(nom_experience, count, fill = 0)
state_par_neurone <- df_count_state %>% spread(state, count, fill = 0)
nb_group <- grid_x * grid_y
nb_state <- length(unique(df_pca_filt$state))
base_rep <- 1:nb_group
rep <- rep("", nb_expe - 1)
lab_rep <- purrr::map(base_rep, function(ele) { c(ele, rep)}) %>% unlist()
expe_par_neurone <- expe_par_neurone %>% head(nb_group)
state_par_neurone <- state_par_neurone %>% head(nb_group)
gathered_expe_par_n <- expe_par_neurone %>% gather(variable, value, -id_neurone) %>%
group_by(id_neurone) %>% mutate(cumsum = cumsum(value))
gathered_state_par_n <- state_par_neurone %>% gather(variable, value, -id_neurone) %>%
group_by(id_neurone) %>% mutate(cumsum = cumsum(value))
gathered_expe_par_n %>% filter(id_neurone == 1)
gathered_state_par_n %>% filter(id_neurone == 1)
expe_neuro_theme <-  theme(panel.margin.x = unit(0, "lines"), panel.margin.y = unit(0, "lines"), panel.border = element_rect(colour = rgb(1.0, 0, 0, 0.5), fill=NA, size=1),
axis.text.x=element_text(size = 6),
axis.title.y=element_blank(), axis.text.y=element_text(size = 8), axis.ticks.y=element_blank(),
strip.background = element_blank(), strip.text.x = element_blank(),
legend.title = element_text(colour="black", size = 5,  face="bold"),
legend.text = element_text(colour="black", size = 5),
legend.key = element_rect(size = 1),
title = element_text(color = "blue", size = 6, face = "bold"))
ggplot(gathered_state_par_n, aes(x = as.factor(id_neurone), y = value, fill = factor(variable))) %+%
geom_bar(stat = "identity") %+%
#geom_text(aes(x = group + .2, y = cumsum - 15, label = value), size = 3, colour = "black", check_overlap = TRUE) %+%
geom_text(aes(x = id_neurone - 0, y = (cumsum + cumsum - value)/2, label = ifelse(value != 0, as.character(variable), "")), size = 3, colour = "black", check_overlap = FALSE) %+%
expe_neuro_theme %+%
ggtitle("états captés")
gathered_expe_n_filt <- gathered_expe_par_n %>% filter(id_neurone < 20)
ggplot(gathered_expe_n_filt, aes(x = id_neurone, y = value, fill = factor(variable))) %+%
geom_bar(stat = "identity", position = "fill") %+%
#geom_text(aes(y = cumsum - 15, label = value), colour = "black") %+%
expe_neuro_theme %+%
ggtitle("expériences captées")
gathered_state_n_filt <- gathered_state_par_n %>% filter(id_neurone < 20)
ggplot(gathered_state_n_filt, aes(x = as.factor(id_neurone), y = value, fill = factor(variable))) %+%
geom_bar(stat = "identity") %+%
#geom_text(aes(x = group + .2, y = cumsum - 15, label = value), size = 3, colour = "black", check_overlap = TRUE) %+%
geom_text(aes(x = id_neurone - 0, y = (cumsum + cumsum - value)/2, label = ifelse(value != 0, as.character(variable), "")), size = 3, colour = "black", check_overlap = FALSE) %+%
expe_neuro_theme %+%
ggtitle("états captés")
ggplot(gathered_expe_par_n, aes(x = id_neurone, y = value, fill = factor(variable))) %+%
geom_bar(stat = "identity", position = "fill") %+%
#geom_text(aes(y = cumsum - 15, label = value), colour = "black") %+%
expe_neuro_theme %+%
ggtitle("expériences captées")
ggplot(gathered_state_par_n, aes(x = id_neurone, y = value, fill = factor(variable))) %+%
geom_bar(stat = "identity", position = "fill") %+%
#geom_text(aes(y = cumsum - 15, label = value), colour = "black") %+%
expe_neuro_theme %+%
ggtitle("états captés")
gathered_state_n_filt <- gathered_state_par_n %>% filter(id_neurone < 100)
ggplot(gathered_state_n_filt, aes(x = as.factor(id_neurone), y = value, fill = factor(variable))) %+%
geom_bar(stat = "identity") %+%
#geom_text(aes(x = group + .2, y = cumsum - 15, label = value), size = 3, colour = "black", check_overlap = TRUE) %+%
geom_text(aes(x = id_neurone - 0, y = (cumsum + cumsum - value)/2, label = ifelse(value != 0, as.character(variable), "")), size = 3, colour = "black", check_overlap = FALSE) %+%
expe_neuro_theme %+%
ggtitle("états captés")
gathered_state_n_filt <- gathered_state_par_n %>% filter(id_neurone < 100)
ggplot(gathered_state_n_filt, aes(x = as.factor(id_neurone), y = value, fill = factor(variable))) %+%
geom_bar(stat = "identity") %+%
#geom_text(aes(x = group + .2, y = cumsum - 15, label = value), size = 3, colour = "black", check_overlap = TRUE) %+%
#geom_text(aes(x = id_neurone - 0, y = (cumsum + cumsum - value)/2, label = ifelse(value != 0, as.character(variable), "")), size = 3, colour = "black", check_overlap = FALSE) %+%
expe_neuro_theme %+%
ggtitle("états captés")
ggplot(gathered_state_n_filt, aes(x = as.factor(id_neurone), y = value, fill = factor(variable, levels = state_levels))) %+%
geom_bar(stat = "identity") %+%
#geom_text(aes(x = group + .2, y = cumsum - 15, label = value), size = 3, colour = "black", check_overlap = TRUE) %+%
#geom_text(aes(x = id_neurone - 0, y = (cumsum + cumsum - value)/2, label = ifelse(value != 0, as.character(variable), "")), size = 3, colour = "black", check_overlap = FALSE) %+%
expe_neuro_theme %+%
ggtitle("états captés")
gathered_state_n_filt <- gathered_state_par_n %>% filter(id_neurone < 200)
ggplot(gathered_state_n_filt, aes(x = as.factor(id_neurone), y = value, fill = factor(variable, levels = state_levels))) %+%
geom_bar(stat = "identity") %+%
#geom_text(aes(x = group + .2, y = cumsum - 15, label = value), size = 3, colour = "black", check_overlap = TRUE) %+%
#geom_text(aes(x = id_neurone - 0, y = (cumsum + cumsum - value)/2, label = ifelse(value != 0, as.character(variable), "")), size = 3, colour = "black", check_overlap = FALSE) %+%
expe_neuro_theme %+%
ggtitle("états captés")
df_all <- as_data_frame(df_all)
save.image("~/githubRepos/affectiveComputing/yasomi_small_set.RData")
